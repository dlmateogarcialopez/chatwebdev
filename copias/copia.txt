<?php
error_reporting(-1);
ini_set('display_errors', 'On');
require './consultas.php';

//require "Mesmotronic/Soap/WsaSoap.php";
//require "Mesmotronic/Soap/WsaSoapClient.php";
//require "Mesmotronic/Soap/WsseAuthHeader.php";

//require "Facebook/autoload.php";

require_once __DIR__ . '/vendor/autoload.php';

class chatBotAPI
{

    //Credenciales HEROKU Mlab pruebas
    //private $host = "mongodb://heroku_69tb2th4:m2oheamen7422pmnq3htdb56dt@ds113775.mlab.com:13775/heroku_69tb2th4";

    //Credenciales HEROKU Mlab pruebas
    private $host = "mongodb://heroku_qqkvqh3x:b50q78jtvojl1aobh01eut4rpj@ds215358-a1.mlab.com:15358/heroku_qqkvqh3x?retryWrites=false";

    private $SGOurl = 'https://checindisponibilidad.chec.com.co/ServiceIndisponibilidad.svc?wsdl';
    private $SIECurl = 'https://checomnicanalidaddes.chec.com.co/WS_SIEC_Omni.SSiec.svc?wsdl';

    private $serverName_sqlServer = "gestion-educativa.database.windows.net";
    private $db_sqlServer = "GestionComercialCHEC";
    private $UID_sqlServer = "usr_gestion_educativa";
    private $PWD_sqlServer = "YXj0q9JctrQoatODR4lr";
    private $con_sqlServer;

    //Credenciales Localhost
    //private $host = "mongodb://localhost:27017/chatbot_db";

    //conexion a BD
    private $con;
    private $bd;

    public function __construct()
    {
        $this->connectToDB();
    }

    //Obtener el cuerpo de la peticion POST del chatbot
    public function detectRequestBody()
    {
        $inputJSON = file_get_contents('php://input');
        $input = json_decode($inputJSON, true);
        return $input;
    }

    public function insertIdConversacion($id)
    {
        insertIdConversacion($this->con, $id);
    }

    //Conectar a la Base de datos
    public function connectToDB()
    {

        /* //conexion sql server
        $connectionInfo = array("Database" => $this->db_sqlServer, "UID" => $this->UID_sqlServer, "PWD" => $this->PWD_sqlServer);
        $this->con_sqlServer = sqlsrv_connect($this->serverName_sqlServer, $connectionInfo);
        if ($this->con_sqlServer) {
        //echo "se conecta";
        } else {
        //echo "Conexion no se pudo establecer.<br />";
        die(print_r(sqlsrv_errors(), true));
        } */

        try {
            $this->con = new MongoDB\Driver\Manager($this->host);
        } catch (MongoDB\Driver\Exception\Exception $e) {
            $filename = basename(__FILE__);
            echo "The $filename script has experienced an error.\n";
            echo "It failed with the following exception:\n";
            echo "Exception:", $e->getMessage(), "\n";
            echo "In file:", $e->getFile(), "\n";
            echo "On line:", $e->getLine(), "\n";
        }
    }

    //Para traer la informacion del usuario de Facebook
    public function getProfileFacebook($senderid)
    {
        $token = "EAAEbDdhspC4BALmpd322QT7nh1t6U2RKyaZB94oJnTyCl7ZAw9jM1AnflhIbwfYFDNqm0AE3FRfsIDBtoEtK86z219PZAUm5W44wfVxQarWo29u0cwLOpTYf9VnrvGLH9wdxXX8xgiD6ioqMTN3vJEbuj8uTtLOueTUfgE33AZDZD";

        /* $senderid = '';
        if (isset($reqBody['originalDetectIntentRequest']['source'])) {

        $senderid = $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'];
        } else {

        $senderid = '2868075403232590';
        } */
        $fb = new \Facebook\Facebook([
            'app_id' => '311221256234030',
            'app_secret' => '9bbe00eaf82a480085446c30dfc616ca',
            'default_graph_version' => 'v3.3',
        ]);

        $response = '';
        $campos = "id,name,first_name,last_name";
        try {
            // Returns a `Facebook\FacebookResponse` object
            $response = $fb->get("/$senderid?fields=$campos", $token);
            //$response = $helper->getAccessToken();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            $response = 'Graph returned an error: ' . $e->getMessage();
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            $response = 'Facebook SDK returned an error: ' . $e->getMessage();
        }

        $user = $response->getGraphObject();
        var_dump($user);
        //insertUserFacebook($this->con, $user);

        /* $url = "https://graph.facebook.com/v2.6/me/messages?access_token=$token";
        $jsonData = '{
        "recipient":{
        "id":"' . $senderid . '"
        },
        "message":{
        "text":"¡Hola ' . $user['name'] . '! 😃 soy Lucy ⚡ y atenderé tus inquietudes relacionadas con las interrupciones del servicio de energía."
        }
        }';

        //Initiate cURL.
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        $result = curl_exec($ch);
        insertUserFacebook($this->con, $result);

        $json['fulfillmentText'] = $user['name']; */
        //definimos los arrays por cada una de las plataformas que tenemos para llenar con la informacion que trae la bd

        //definicion de mensaje de salida
        $mensajeSalida = array();

        //definicion de array de salida para facebook
        $arraySalida = array(
            'type' => 0,
            'platform' => 'facebook',
            'image' => array(
                'imageUri' => 'https://chatbotchecserver.com/chatbotCHECUsuarios/img/CHEC_CHATBOTImagen(1).jpg',
            ),
        );
        array_push($mensajeSalida, $arraySalida);

        $arraySalida2 = array(
            'type' => 0,
            'platform' => 'facebook',
            'text' => array(
                'text' => [
                    "¡Hola " . $user['first_name'] . "! 😃 soy Lucy ⚡ y atenderé tus inquietudes relacionadas con las interrupciones del servicio de energía.",
                    //"¡Hola! 😃 soy Lucy ⚡ y atenderé tus inquietudes relacionadas con las interrupciones del servicio de energía.",
                ],
            ),
        );
        array_push($mensajeSalida, $arraySalida2);

        $arraySalida3 = array(
            "type" => 4,
            "platform" => "facebook",
            "payload" => array(
                "facebook" => array(
                    "attachment" => array(
                        "type" => "template",
                        "payload" => array(
                            "template_type" => "list",
                            "top_element_style" => "compact",
                            "elements" => array(
                                array(
                                    "title" => "Falta de Energía",
                                    "image_url" => "https://chatbotchecserver.com/chatbotCHECUsuarios/img/FaltaEnergia250x250.jpg",
                                    "subtitle" => "Consulta si tu sector presenta algún fallo",
                                    "buttons" => array(
                                        array(
                                            "type" => "postback",
                                            "payload" => "Falta_Energía",
                                            "title" => "Consultar Interrupción de Energía",
                                            "webview_height_ratio" => "tall",
                                        ),
                                    ),
                                ),
                                array(
                                    "title" => "Pago en Línea",
                                    "image_url" => "https://chatbotchecserver.com/chatbotCHECUsuarios/img/PagoenLinea_250x250.jpg",
                                    "subtitle" => "Aprenda a pagar su factura de la energía en linea",
                                    "buttons" => array(
                                        array(
                                            "type" => "postback",
                                            "payload" => "Pago_Linea",
                                            "title" => "Ver Información",
                                            "webview_height_ratio" => "tall",
                                        ),
                                    ),
                                ),
                                array(
                                    "title" => "Puntos de Atención",
                                    "image_url" => "https://chatbotchecserver.com/chatbotCHECUsuarios/img/PuntosAtencion250x250.jpg",
                                    "subtitle" => "Conoce la ubicación y los horarios de cada uno de los puntos de atención",
                                    "buttons" => array(
                                        array(
                                            "type" => "postback",
                                            "payload" => "Centros_Pago",
                                            "title" => "Consultar Puntos de Atención",
                                            "webview_height_ratio" => "tall",
                                        ),
                                    ),
                                ),
                                array(
                                    "title" => "Vacantes",
                                    "image_url" => "https://chatbotchecserver.com/chatbotCHECUsuarios/img/Vacantes_250x250.jpg",
                                    "subtitle" => "Encuentra las vacantes que tenemos para ti",
                                    "buttons" => array(
                                        array(
                                            "type" => "postback",
                                            "payload" => "ver_vacantes",
                                            "title" => "Ver Vacantes",
                                            "webview_height_ratio" => "tall",
                                        ),
                                    ),
                                ),
                            ),
                            "buttons" => array(
                                array(
                                    "title" => "Otras Consultas",
                                    "type" => "postback",
                                    "payload" => "otras_consultas",
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        );
        array_push($mensajeSalida, $arraySalida3);

        //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido

        return $json;
    }

    public function pruebaNombre($reqBody)
    {
        //TOKEN APP BOT
        $token = "EAAEbDdhspC4BALmpd322QT7nh1t6U2RKyaZB94oJnTyCl7ZAw9jM1AnflhIbwfYFDNqm0AE3FRfsIDBtoEtK86z219PZAUm5W44wfVxQarWo29u0cwLOpTYf9VnrvGLH9wdxXX8xgiD6ioqMTN3vJEbuj8uTtLOueTUfgE33AZDZD";

        $senderid = '';
        if (isset($reqBody['originalDetectIntentRequest']['source'])) {
            //ID DEL CHAT QUE HACE LA SOLICITUD
            $senderid = $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'];
        } else {
            //ID DEL CHAT CUANDO LA CONSULTA SE REALIZA DESDE DIALOGFLOW
            $senderid = '2868075403232590';
        }
        /*
        APP_ID: ID DE LA APP BOT
        APP_SECRET: PASSWOD GENERADO POR FACXEBOOK DEV
        VERSION
         */
        $fb = new \Facebook\Facebook([
            'app_id' => '311221256234030',
            'app_secret' => '9bbe00eaf82a480085446c30dfc616ca',
            'default_graph_version' => 'v3.3',
        ]);

        $response = '';
        $campos = "id,name,first_name,last_name";
        try {
            // Returns a `Facebook\FacebookResponse` object
            $response = $fb->get("/$senderid?fields=$campos", $token);
            //$response = $helper->getAccessToken();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            $response = 'Graph returned an error: ' . $e->getMessage();
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            $response = 'Facebook SDK returned an error: ' . $e->getMessage();
        }

        $user = $response->getGraphObject();

        //URL OARA ENVIAR MENSAJE AL CHAT QUE SOLICITA EL CAMBIO
        $url = "https://graph.facebook.com/v2.6/me/messages?access_token=$token";

        /*
        contenido del mensaje que s ele envi al usuario */
        $jsonData = '{
            "recipient":{
            "id":"' . $senderid . '"
            },
            "message":{
                "text":"' . $user['name'] . ' 😃 Ahora te atenderá un asesor, deja tu mensaje y alguien se comunicará contigo"
            }
            }';

        //Initiate cURL. ejeución del mensaje
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        $result = curl_exec($ch);

        /*
        CAMBIO DE APP
        BOT A INBOX
         */
        //URL DE DE SOLICITUD DE CAMBIO DE APP
        $url = "https://graph.facebook.com/v2.6/me/pass_thread_control?access_token=$token";

        /* CONTENIDO PARA CAMBIO DE APP */
        $jsonData = '{
            "recipient" : {
                "id" : "' . $senderid . '" },
                "target_app_id" : 263902037430900,
                "metadata" : "String to pass to secondary receiver app"
            }';

        //Initiate cURL. EJECUIÓN DE PETICIÓN
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        $result = curl_exec($ch);
    }

    public function getNameFacebook($senderId)
    {
        $token = "EAAEbDdhspC4BALmpd322QT7nh1t6U2RKyaZB94oJnTyCl7ZAw9jM1AnflhIbwfYFDNqm0AE3FRfsIDBtoEtK86z219PZAUm5W44wfVxQarWo29u0cwLOpTYf9VnrvGLH9wdxXX8xgiD6ioqMTN3vJEbuj8uTtLOueTUfgE33AZDZD";

        //$facebook = new Facebook\Facebook(['http_client_handler' => 'stream']);
        $fb = new \Facebook\Facebook([
            'http_client_handler' => 'stream',
            'app_id' => '311221256234030',
            'app_secret' => '9bbe00eaf82a480085446c30dfc616ca',
            'default_graph_version' => 'v2.10',
        ]);

        $response = '';
        $campos = "id,name,first_name,last_name";
        try {
            // Returns a `Facebook\FacebookResponse` object            
            $response = $fb->get("/$senderId?fields=$campos", $token);
            //$response = $helper->getAccessToken();
        } catch (Facebook\Exceptions\FacebookResponseException $e) {
            $response = 'Graph returned an error: ' . $e->getMessage();
        } catch (Facebook\Exceptions\FacebookSDKException $e) {
            $response = 'Facebook SDK returned an error: ' . $e->getMessage();
        }
        //insertUserFacebook($this->con, $response);
        $user = $response->getGraphObject();

        return $user['first_name'];

        //return '🙋‍♀️';

    }

    //INICIO DE CONVERSACION, TRAER NOMBRE PARA FACEBOOK Y TELEGRAM, SKYPE ES REDIRIGIDO A PEDIR EL NOMBRE
    public function getInicioConversacion($reqBody)
    {
        //$this->insertIdConversacion($reqBody);
        //$idSession = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);
        $mensajeSalida = array();
        $nombreUsuario = '';
        $returnNombre = false;
        //$nombreUsuario = $this->getNameFacebook('2868075403232590');
        if (isset($reqBody['originalDetectIntentRequest']['source'])) {
            if ($reqBody['originalDetectIntentRequest']['source'] == 'facebook') {
                if ($reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'] != "2868075403232590") {
                    // insertSessionDialog($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id']);
                }
                $senderid = $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'];

                $nombreUsuario = $this->getNameFacebook($senderid);

                //insertUserFacebook($this->con, $nombreUsuario);
                $returnNombre = true;
            } else if ($reqBody['originalDetectIntentRequest']['source'] == 'telegram') {
                if ($reqBody['originalDetectIntentRequest']['payload']['data']['from']['id'] != 613620891) {

                    insertSessionDialog($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['from']['id']);
                }
                $nombreUsuario = $reqBody['originalDetectIntentRequest']['payload']['data']['from']['first_name'];
                $returnNombre = true;
            } else if ($reqBody['originalDetectIntentRequest']['source'] == 'skype') {
                insertSessionDialog($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['address']['conversation']['id']);
            }
        }

        //Obtenemos el nombre de cada usuario que se contacta
        if ($returnNombre) {

            $json['outputContexts'] = array(
                array(
                    "name" => 'projects/chatbotchec-usuarios/agent/sessions/65595031-7c7b-eeff-7fb9-5b04c053ebb4/contexts/nombre',
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "nombre" => $nombreUsuario,
                        "nombre.original" => $nombreUsuario,
                    ),
                ),
            );
            $json['followupEventInput'] = array(
                'name' => 'inicio_conversacion_ft',
                'languageCode' => 'es',
            );
            /* $json['followupEventInput'] = array(
            'name' => 'inicio_conversacion_sin_servicio',
            'languageCode' => 'es',
            ); */

            return $json;
        }
    }

    //Obtener los datos del usuario a partir del NIU
    //Todas estas tienden a desaparecer en el update
    public function getUserData($NIU)
    {
        $persona = getData($NIU, $this->con);
        return $this->respuesta($persona);
    }

    //insert para el lo9g de tiempos de ejecuci´n del eb service de sgo
    public function insertLogTimeRequest($tiempo, $niu)
    {
        $persona = insertLog_TimeRequest($this->con, $tiempo, $niu);

        return $persona;
    }

    /*GUARDAR INFORMAICON PARA  GENERACION DE REPORTES PARA EL SGO */

    public function guardar_informacion_adicional($reqBody, $resolveQuery, $niu, $nombreSalida, $contextoNombre, $contextoReporte)
    {
        $response = array();
        $senderId = '';
        $source = '';

        if (isset($reqBody['originalDetectIntentRequest']['source'])) {

            if ($reqBody['originalDetectIntentRequest']['source'] == 'facebook') {
                $senderId = $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'];
                $source = $reqBody['originalDetectIntentRequest']['source'];
            } else if ($reqBody['originalDetectIntentRequest']['source'] == 'telegram') {
                if (isset($reqBody['originalDetectIntentRequest']['payload']['data']['message'])) {

                    $senderId = $reqBody['originalDetectIntentRequest']['payload']['data']['message']['from']['id'];
                    $source = $reqBody['originalDetectIntentRequest']['source'];
                } else if ($reqBody['originalDetectIntentRequest']['payload']['data']['callback_query']) {
                    $senderId = $reqBody['originalDetectIntentRequest']['payload']['data']['callback_query']['from']['id'];
                    $source = $reqBody['originalDetectIntentRequest']['source'];
                }
            }
        }

        $response = $this->guardarInformacionAdicional($niu, $resolveQuery, $nombreSalida, $contextoNombre, $contextoReporte, $senderId, $source);

        return $response;
    }

    /* GUARDAR NOMBRE QUE ENTRA POR EL FALLBACK DE REPORTES */
    public function guardarNombreExtrano($nombre, $contextoreporte, $returnContext)
    {

        $response = insertNombreExtrano($this->con, $nombre);

        if ($returnContext) {

            $json['outputContexts'] = array(
                array(
                    "name" => $contextoreporte,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "nombreFallback" => $nombre,
                    ),
                ),
            );
            $json['followupEventInput'] = array(
                'name' => 'nombre_fallback',
                'languageCode' => 'es',
            );
            return $json;
        }
    }

    /* REVISAR SI  REALIZO REPORTE EL NUMERO DE CUENTA*/

    public function RealizoReporte($niu, $nombreSalida, $contextoReporte, $contextoNombre)
    {

        $respuestFacebook = array();
        $respuestTelegram = array();
        $newReport = getReporteExistente($this->con, $niu);

        $speech = "";
        if (count($newReport) == 0) {
            $speech = $nombreSalida . " vamos a generar un reporte de la falla de energía en tu sector/inmueble.👩‍💼 \n Dime, *¿Cuál es la situación que estás presentando?*";
            $speechWebChatLucy = $nombreSalida . " vamos a generar un reporte de la falla de energía en tu sector/inmueble.👩‍💼 \n Dime, ¿Cuál es la situación que estás presentando?";
            //$json['fulfillmentText'] = $speech;
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'text' => array(
                        'text' => [
                            $speech,
                        ],
                    ),
                ),
                array(
                    "payload" => array(
                        "chatWebLucy" => array(
                            "text" => $speechWebChatLucy
                        ),
                    ),
                ),
            );
            $json['outputContexts'] = array(
                array(
                    "name" => $contextoReporte,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "nombre" => $nombreSalida,
                        "niu_cuenta" => $niu,
                        "contextoNombre" => $contextoNombre,
                    ),
                ),
                array(
                    "name" => $contextoNombre,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "niu_cuenta" => $niu,
                    ),
                ),
            );
            return $json;
        } else {
            $speech = $nombreSalida . " ya has realizado un reporte de un fallo recientemente,😅 estamos trabajando por solucionar este inconveniente. Gracias por tu paciencia";
            $speechChatWebLucy = $nombreSalida . " ya has realizado un reporte de un fallo recientemente,😅 estamos trabajando por solucionar este inconveniente. Gracias por tu paciencia. Por favor selecciona una opción:";
            $respuestFacebook = array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Selecciona una Opción:",
                                "buttons" => array(
                                    array(
                                        "type" => 'postback',
                                        "payload" => '🔙 Regresar al Menú Principal',
                                        "title" => '🔙 Regresar al Menú Principal',
                                    ),
                                    array(
                                        "type" => 'postback',
                                        "payload" => '👌 Finalizar Consulta',
                                        "title" => '👌 Finalizar Consulta',
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );

            $respuestaSkype = array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "attachments" => array(
                            array(
                                "contentType" => "application/vnd.microsoft.card.hero",
                                "content" => array(
                                    "text" => "Selecciona una Opción:",
                                    "buttons" => array(
                                        array(
                                            "type" => "imBack",
                                            "title" => "🔙 Regresar al Menú Principal",
                                            "value" => "🔙 Regresar al Menú Principal",
                                        ),
                                        array(
                                            "type" => "imBack",
                                            "title" => "👌 He finalizado la consulta",
                                            "value" => "👌 He finalizado la consulta",
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );

            $respuestTelegram = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Selecciona una Opción:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Regresar al Menú Principal',
                                    '👌 Finalizar Consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                        ),
                    ),
                ),
            );

            $respuestaChatWebLucy = array(
                "payload" => array(
                    "text" => $speechChatWebLucy,
                    "chips" => array(
                        array(
                            "text" => "🔙 Regresar al Menú Principal",
                            "input" => "🔙 Regresar al Menú Principal"
                        ),
                        array(
                            "text" => "👌 Finalizar Consulta",
                            "input" => "👌 Finalizar Consulta"
                        )
                    ),
                ),
            );


            //$json['fulfillmentText'] = $speech;
            //$json['displayText'] = $speech;
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'text' => array(
                        'text' => [
                            $speech,
                        ],
                    ),
                ),
                $respuestFacebook,
                $respuestTelegram,
                $respuestaSkype,
                $respuestaChatWebLucy,
            );
            $json['outputContexts'] = array(
                array(
                    "name" => $contextoNombre,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "nombre" => $nombreSalida,
                    ),
                ),
                array(
                    "name" => $contextoNombre,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "niu_cuenta" => $niu,
                    ),
                ),
            );
            return $json;
        }
    }
    /* GUARDAR REPORTE DE FALLO DE ENERGIA */

    public function guardar_reporte($reqBody, $niu, $telefono, $nombreCompleto, $apellidoCompleto, $nombreSalida)
    {
        //$newReport = getReporteExistente($this->con, $niu);

        $response = array();

        $response = $this->guardarReporte($niu, $reqBody, $telefono, $nombreCompleto, $apellidoCompleto, $nombreSalida);
        return $response;
    }

    /* GENERACION DE REPORTES PARA EL SGO */

    public function generar_reportes_Sin_adicion($resolveQuery, $niu, $telefono, $correo)
    {
        $response = array();
        $response = $this->guardarReporte($niu, $resolveQuery, $telefono, $correo, '', '');

        return $response;
    }

    //funcion para guardar los aportes adicionales de un reporte de fallo que genera el usuario y devolver array para respuesta
    public function guardarReporte($niu, $reqBody, $telefono, $nombreCompleto, $apellidoCompleto, $nombreSalida)
    {
        $idInfoAdiReporte = '';
        foreach ($reqBody['queryResult']['outputContexts'] as $i => $con) {

            $name = explode("/", $con['name']);
            $largeContext = count($name);
            if ($name[$largeContext - 1] == 'c1_reporte') {
                if (isset($con['parameters']["idInfoAdi"])) {
                    $idInfoAdiReporte = $con['parameters']["idInfoAdi"];
                    break;
                }
            }
        }
        $report = insertarReporte($this->con, $niu, $reqBody['queryResult']['queryText'], $telefono, $nombreCompleto, $apellidoCompleto, $idInfoAdiReporte);
        $mensajeSalida = array();
        $arrayRepliesFac = array();
        $arrayRepliesSky = array();

        array_push($arrayRepliesFac, array(
            "type" => 'postback',
            "payload" => '🔙 Regresar al Menú Principal',
            "title" => '🔙 Regresar al Menú Principal',
        ));
        array_push($arrayRepliesFac, array(
            "type" => 'postback',
            "payload" => '👌 Finalizar Consulta',
            "title" => '👌 Finalizar Consulta',
        ));

        $arraySalida = array(
            'type' => 0,
            'platform' => 'facebook',
            'text' => array(
                'text' => [
                    $nombreSalida . ' gracias por ayudarnos a prestar un mejor servicio con tu reporte.😀 Nuestros técnicos atenderán la falla lo antes posible',
                ],
            ),
        );
        array_push($mensajeSalida, $arraySalida);

        array_push($mensajeSalida, array(
            "type" => 4,
            "platform" => "facebook",
            "payload" => array(
                "facebook" => array(
                    "attachment" => array(
                        "type" => "template",
                        "payload" => array(
                            "template_type" => "button",
                            "text" => "Elige una opción:",
                            "buttons" => $arrayRepliesFac,
                        ),
                    ),
                ),
            ),
        ));

        array_push($mensajeSalida, array(
            'type' => 4,
            'platform' => 'telegram',
            'payload' => array(
                'telegram' => array(
                    'text' => 'Selecciona una Opción:',
                    'reply_markup' => array(
                        'keyboard' => array(
                            array(
                                '🔙 Regresar al Menú Principal',
                                '👌 Finalizar Consulta',
                            ),
                        ),
                        'one_time_keyboard' => true,
                        'resize_keyboard' => true,
                    ),
                ),
            ),
        ));

        //botones de skype
        array_push($arrayRepliesSky, array(
            "type" => "imBack",
            "title" => "🔙 Regresar al Menú Principal",
            "value" => "🔙 Regresar al Menú Principal",
        ));

        array_push($arrayRepliesSky, array(
            "type" => "imBack",
            "title" => "👌 Finalizar Consulta",
            "value" => "👌 Finalizar Consulta",
        ));

        array_push($mensajeSalida, array(
            "type" => 4,
            "platform" => "skype",
            "payload" => array(
                "skype" => array(
                    "type" => "message",
                    "text" => "",
                    "attachments" => array(
                        array(
                            "contentType" => 'application/vnd.microsoft.card.hero',
                            "content" => array(
                                "text" => "Elige una opción:",
                                "buttons" => $arrayRepliesSky,
                            ),
                        ),
                    ),
                ),
            ),
        ));


        //mensaje salida para webChatLucy
        array_push($mensajeSalida, array(
            "payload" => array(
                "chatWebLucy" => array(
                    "text" => $nombreSalida . " gracias por ayudarnos a prestar un mejor servicio con tu reporte.😀 Nuestros técnicos atenderán la falla lo antes posible",
                    "chips" => array(
                        array(
                            "text" => "🔙 Regresar al Menú Principal",
                            "input" => "🔙 Regresar al Menú Principal"
                        ),
                        array(
                            "text" => "👌 Finalizar Consulta",
                            "input" => "👌 Finalizar Consulta"
                        ),
                    ),
                ),
            ),
        ));

        //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
        $json['fulfillmentMessages'] = $mensajeSalida;

        return $json;
    }

    //funcion para guardar los aportes adicionales de un reporte de fallo que genera el usuario y devolver array para respuesta
    public function guardarInformacionAdicional($niu, $resolveQuery, $nombreSalida, $contextoNombre, $contextoReporte, $senderId, $source)
    {
        $idInfoAdi = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 8);
        $report = insertInfoAdicional($this->con, $niu, $resolveQuery, $idInfoAdi, $senderId, $source);

        $mensajeSalida = array();


        //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
        $json['fulfillmentMessages'] = array(
            array(
                'type' => 0,
                'platform' => 'facebook',
                'text' => array(
                    'text' => [
                        '👩‍💻 Por favor ingresa el nombre completo de la persona que realiza el reporte de la interrupción de energía:',
                    ],
                ),
            ),
            array(
                "payload" => array(
                    "chatWebLucy" => array(
                        "text" => "👩‍💻 Por favor ingresa el nombre completo de la persona que realiza el reporte de la interrupción de energía:"
                    ),
                ),
            )
        );

        $json['outputContexts'] = array(
            array(
                "name" => $contextoNombre,
                "lifespanCount" => 1,
                "parameters" => array(
                    "nombre" => $nombreSalida,
                ),
            ),
            array(
                "name" => $contextoReporte,
                "lifespanCount" => 1,
                "parameters" => array(
                    "idInfoAdi" => $idInfoAdi,
                ),
            ),
        );

        return $json;
    }

    public function cargarReportes($fechaActual)
    {
        /* $fecha1 = $fechaActual;
        $fecha2 = strtotime('-8 hour', strtotime($fechaActual));
        $fecha2 = date('Y-m-d H:i:s', $fecha2); */
        $data = getReportes($this->con, $fechaActual);

        return $data;
    }
    public function cargarDifusion()
    {
        $data = getDifusion($this->con);

        return $data;
    }
    public function cargarUsuarios()
    {
        $data = cargar_Usuarios($this->con);

        return $data;
    }

    public function getNiuFromNiu($niu, $isTest)
    {
        $personas = getNIUwithNiu($this->con, $niu);
        $resultado = array();
        //Si encuentra un solo registro o muchos registros
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {

                //Mostrar valores sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION));
            }
            $resultado['VARIOS'] = $foundResults;
            if (count($personas) >= 1) {
                // $this->setLogResultado('Mas de 1 Resultado de Consulta por Cuenta', 'CHATBOT USUARIOS');
            } elseif (count($personas) == 0) {
                // $this->setLogResultado('Solo 1 Resultado de Consulta por Cuenta', 'CHATBOT USUARIOS');
            }
        } else {
            $resultado['NINGUNO'] = 1;
            $this->setLogResultado('Ningun Resultado de Consulta por Cuenta', 'CHATBOT USUARIOS');
        }
        return $resultado;
    }

    public function getNiuFromCedula($cedula)
    {
        $personas = getNIUwithCedula($this->con, $cedula);
        $resultado = array();
        //Si encuentra un solo registro o muchos registros
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {

                //Mostrar valores sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION));
            }
            $resultado['VARIOS'] = $foundResults;
            if (count($personas) >= 1) {
                $this->setLogResultado('Mas de 1 Resultado de Consulta por Cedula', 'CHATBOT USUARIOS');
            } elseif (count($personas) == 0) {
                $this->setLogResultado('Solo 1 Resultado de Consulta por Cedula', 'CHATBOT USUARIOS');
            }
        } else {
            $resultado['NINGUNO'] = 1;
            $this->setLogResultado('Ningun Resultado de Consulta por Cedula', 'CHATBOT USUARIOS');
        }
        return $resultado;
    }

    public function getNiuFromNIT($nit)
    {
        $personas = getNIUwithNIT($this->con, $nit);
        $resultado = array();
        //Si encuentra un solo registro
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {
                //Mostrar valores enmascarados
                /* $direcShow = "******".substr( $value->DIRECCION, -7);
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $direcShow)); */

                //Mostrar valores sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION));
            }
            $resultado['VARIOS'] = $foundResults;
            if (count($personas) >= 1) {
                $this->setLogResultado('Mas de 1 Resultado de Consulta por NIT', 'CHATBOT USUARIOS');
            } elseif (count($personas) == 0) {
                $this->setLogResultado('Solo 1 Resultado de Consulta por NIT', 'CHATBOT USUARIOS');
            }
        } else {
            $resultado['NINGUNO'] = 1;
            $this->setLogResultado('Ningun Resultado de Consulta por NIT', 'CHATBOT USUARIOS');
        }
        return $resultado;
    }

    public function getNiuFromAddress($direccion, $municipio)
    {
        $direccionesProcesadas = $this->processAddress($direccion);
        //var_dump($direccionesProcesadas);
        $personas = getNIUwithAddress($this->con, $direccionesProcesadas, $municipio);
        $resultado = array();
        //Si encuentra un solo registro
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {

                //La siguiente linea se encarga de enmascarar los datos por motivos de seguridad.
                /* $direcShow = "******".substr( $value->DIRECCION, -7);
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' =>$direcShow)); */

                //Sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION));
            }
            $resultado['VARIOS'] = $foundResults;
            if (count($personas) >= 1) {
                $this->setLogResultado('Mas de 1 Resultado de Consulta por Direccion', 'CHATBOT USUARIOS');
            } elseif (count($personas) == 0) {
                $this->setLogResultado('Solo 1 Resultado de Consulta por Direccion', 'CHATBOT USUARIOS');
            }
        } else {
            $resultado['NINGUNO'] = 1;
            $this->setLogResultado('Ningun Resultado de Consulta por Direccion', 'CHATBOT USUARIOS');
        }
        return $resultado;
    }

    public function getNiuFromName($nombre, $municipio)
    {
        $personas = getNIUwithName($this->con, $nombre, $municipio);
        $resultado = array();
        //Si encuentra un solo registro
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {

                //Mostrar valores enmascarados
                /* $direcShow = "******".substr( $value->DIRECCION, -7);
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $direcShow)); */

                //Mostrar valores sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION));
            }
            $resultado['VARIOS'] = $foundResults;
            if (count($personas) >= 1) {
                $this->setLogResultado('Mas de 1 Resultado de Consulta por Nombre', 'CHATBOT USUARIOS');
            } elseif (count($personas) == 0) {
                $this->setLogResultado('Solo 1 Resultado de Consulta por Nombre', 'CHATBOT USUARIOS');
            }
        } else {
            $resultado['NINGUNO'] = 1;
            $this->setLogResultado('Ningun Resultado de Consulta por Nombre', 'CHATBOT USUARIOS');
        }
        return $resultado;
    }

    public function getNiuFromPhone($telefono)
    {
        $personas = array();
        if (strlen($telefono) == 10) {
            $personas = getNIUwithCellPhone($this->con, $telefono);
        } else {
            $personas = getNIUwithPhone($this->con, $telefono);
        }

        $resultado = array();
        //Si encuentra un solo registro
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {

                //Mostrar valores sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION));
            }
            $resultado['VARIOS'] = $foundResults;
            if (count($personas) >= 1) {
                $this->setLogResultado('Mas de 1 Resultado de Consulta por Telefono', 'CHATBOT USUARIOS');
            } elseif (count($personas) == 0) {
                $this->setLogResultado('Solo 1 Resultado de Consulta por Telefono', 'CHATBOT USUARIOS');
            }
        } else {
            $resultado['NINGUNO'] = 1;
            $this->setLogResultado('Ningun Resultado de Consulta por Telefono', 'CHATBOT USUARIOS');
        }
        return $resultado;
    }

    public function processAddress($direccion)
    {

        $direcNoSymbols = $this->deleteSymbols($direccion);

        if (strpos($direccion, 'número')) {
            $direcNoSymbols = substr_replace($direcNoSymbols, ' ', strpos($direcNoSymbols, 'número'), 1);
        }
        if (strpos($direccion, 'numero')) {
            $direcNoSymbols = substr_replace($direcNoSymbols, ' ', strpos($direcNoSymbols, 'numero'), 1);
        }
        $res = preg_replace("/[^a-zA-Z0-9\s]/", "", $direcNoSymbols);
        $output = preg_replace('!\s+!', ' ', $res);
        $array = explode(" ", strtoupper($output));

        foreach ($array as $i => $value) {

            if (
                $value == "CARRERA" || $value == "CRA" || $value == "CAR" || $value == "CR" || $value == "KRRA" || $value == "CARRERAS" || $value == "KRA"
                || $value == "KRR" || $value == "KARRERA" || $value == "KRRERA" || $value == "KARR" || $value == "CRR" || $value == "CRRA" || $value == "K"
            ) {
                $array[$i] = "CRA";
            }
            if (
                $value == "CALLE" || $value == "CLL" || $value == "CLLL" || $value == "CALL" || $value == "CAYE" || $value == "CL" || $value == "CALLES"
                || $value == "KALLE" || $value == "KLL" || $value == "CAL" || $value == "KLLE" || $value == "KL"
            ) {
                $array[$i] = "CLL";
            }
            if ($value == "AVENIDA" || $value == "AV" || $value == "AVE" || $value == "AVDA") {
                $array[$i] = "AVE";
            }
            if ($value == "EDIFICIO" || $value == "ED") {
                $array[$i] = "EDI";
            }
            if ($value == "N" || $value == "NO" || $value == "NUMERO" || $value == "NÚMERO") {
                $array[$i] = " ";
            }
            if ($value == "APARTAMENTO" || $value == "APTO" || $value == "APT" || $value == "AP" || $value == "APARTAMENTOS" || $value == "APTOS") {
                $array[$i] = "APT";
            }
            if ($value == "BLOQUE" || $value == "BLOQUES" || $value == "BLQ" || $value == "BL" || $value == "BLOKE") {
                $array[$i] = "BLQ";
            }
            if ($value == "LOCAL" || $value == "LOC") {
                $array[$i] = "LOC";
            }
            if ($value == "VEREDA" || $value == "VDA") {
                $array[$i] = "VDA";
            }
            if ($value == "SECTOR" || $value == "SEC" || $value == "SECT") {
                $array[$i] = "SEC";
            }
            if ($value == "DIAGONAL" || $value == "DIAG" || $value == "DIA" || $value == "DNAL") {
                $array[$i] = "DIG";
            }
            //FALTA
            if ($value == "CASA" || $value == "CASAS" || $value == "CA" || $value == "CSA" || $value == "CAS") {
                $array[$i] = "CAS";
            }
            if ($value == "INTERIOR" || $value == "INTE" || $value == "INTER" || $value == "IN") {
                $array[$i] = "INT";
            }
            if ($value == "PISO" || $value == "PISOS" || $value == "P" || $value == "PIS" || $value == "PSO") {
                $array[$i] = "PSO";
            }
            //
            if (
                $value == "BARRIO" || $value == "BARR" || $value == "BAR" || $value == "BRIO"
                || $value == "VARRIO" || $value == "VARR"
            ) {
                $array[$i] = "BRR";
            }
            if ($value == "FINCA" || $value == "FNCA" || $value == "FINC" || $value == "FNC") {
                $array[$i] = "FCA";
            }
            if ($value == "SALIDA" || $value == "SDA" || $value == "SLIDA" || $value == "SA") {
                $array[$i] = "SAL";
            }
            if ($value == "MANZANA" || $value == "MANZ" || $value == "MA" || $value == "MZ" || $value == "MNAZ") {
                $array[$i] = "MNZ";
            }
            if ($value == "VILLA" || $value == "VILL" || $value == "VI" || $value == "V") {
                $array[$i] = "VIL";
            }
            if ($value == "TOR" || $value == "TORE" || $value == "TORRE" || $value == "TRR") {
                $array[$i] = "TORRE";
            }
            if ($value == "URBANIZACION") {
                $array[$i] = "URB";
            }
            if ($value == "CABAÑA" || $value == "CABAA") {
                $array[$i] = "CABANA";
            }
            if ($value == "LOTE" || $value == "LOTES" || $value == "LT") {
                $array[$i] = "LTE";
            }
            if ($value == "OFICINA" || $value == "OFICINAS" || $value == "OF") {
                $array[$i] = "OFI";
            }
        }

        return $array;
    }

    public function recortAddress($direccion)
    {
        $direccion = $this->deleteSymbols($direccion);

        if (strlen($direccion) <= 23) {

            if (substr($direccion, 0, 3) == "CLL" || substr($direccion, 0, 3) == "CRA") {
                if (substr($direccion, 5, 5) == " ") {

                    return "***" . substr($direccion, 3, 12) . "***";
                } else {
                    return "***" . substr($direccion, 3, 15) . "***";
                }
            } else {
                if (strlen($direccion) < 12) {
                    return "***" . substr($direccion, 3, 12) . "***";
                } else {
                    return "***" . substr($direccion, 3, 15) . "***";
                }
            }
        } else {
            return $direccion;
        }
    }

    public function deleteSymbols($direccion)
    {

        $direccion = trim($direccion);

        $direccion = str_replace(
            array('á', 'à', 'ä', 'â', 'ª', 'Á', 'À', 'Â', 'Ä'),
            array('a', 'a', 'a', 'a', 'a', 'A', 'A', 'A', 'A'),
            $direccion
        );

        $direccion = str_replace(
            array('é', 'è', 'ë', 'ê', 'É', 'È', 'Ê', 'Ë'),
            array('e', 'e', 'e', 'e', 'E', 'E', 'E', 'E'),
            $direccion
        );

        $direccion = str_replace(
            array('í', 'ì', 'ï', 'î', 'Í', 'Ì', 'Ï', 'Î'),
            array('i', 'i', 'i', 'i', 'I', 'I', 'I', 'I'),
            $direccion
        );

        $direccion = str_replace(
            array('ó', 'ò', 'ö', 'ô', 'Ó', 'Ò', 'Ö', 'Ô'),
            array('o', 'o', 'o', 'o', 'O', 'O', 'O', 'O'),
            $direccion
        );

        $direccion = str_replace(
            array('ú', 'ù', 'ü', 'û', 'Ú', 'Ù', 'Û', 'Ü'),
            array('u', 'u', 'u', 'u', 'U', 'U', 'U', 'U'),
            $direccion
        );

        $direccion = str_replace(
            array('ñ', 'Ñ', 'ç', 'Ç'),
            array('n', 'N', 'c', 'C'),
            $direccion
        );

        $direccion = str_replace(
            array(
                "\\", "¨", "º", "-", "_", "~",
                "#", "@", "|", "!", "\"",
                "·", "$", "%", "&", "/",
                "(", ")", "?", "'", "¡",
                "¿", "[", "^", "<code>", "]",
                "+", "}", "{", "¨", "´",
                ">", "< ", ";", ",", ":",
                ".", "N°", " "
            ),
            ' ',
            $direccion
        );
        $direccion = str_replace(
            array("NUM", "num"),
            ' ',
            $direccion
        );
        return $direccion;
    }

    public function insertSenderNiu($reqBody, $niu)
    {
        if (isset($reqBody['originalDetectIntentRequest']['source'])) {

            if ($reqBody['originalDetectIntentRequest']['source'] == 'facebook') {
                if ($reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'] != "2868075403232590") {

                    insertSenderNiu($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'], $niu);
                }
            } else if ($reqBody['originalDetectIntentRequest']['source'] == 'telegram') {
                if (isset($reqBody['originalDetectIntentRequest']['payload']['data']['message'])) {

                    if ($reqBody['originalDetectIntentRequest']['payload']['data']['message']['from']['id'] != 613620891) {

                        insertSenderNiu($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['message']['from']['id'], $niu);
                    }
                } else if ($reqBody['originalDetectIntentRequest']['payload']['data']['callback_query']) {
                    if ($reqBody['originalDetectIntentRequest']['payload']['data']['callback_query']['from']['id'] != 613620891) {

                        insertSenderNiu($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['callback_query']['from']['id'], $niu);
                    }
                }
            }
        }
    }

    //---------------------------- MeTODOS INVOCADOS DESDE ENDPOINT ------------------------------
    //Metodo que busca las indisponibilidades general
    public function getSearchIndis($niu, $isTest, $nombreSalida, $reqBody, $contextoNombre)
    {
        $this->insertSenderNiu($reqBody, $niu);
        $response = $this->getIndisponibilidad($niu, $isTest, 'CHATBOT USUARIOS', $nombreSalida);
        //var_dump($nombreSalida);
        //Validar si no se encontro ninguna indisponibilidad para enviar diferentes tipos de respuesta
        //if (substr($response, 0, 7) == "en este") { //ninguna suspensión ni me reporta ninguna falla
        if (strpos($response, "ninguna suspensión ni me reporta ninguna falla") !== false || strpos($response, "se ha normalizado") !== false) {
            //$json['fulfillmentText'] = $response;
            //$json['displayText'] = $response;
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'text' => array(
                        'text' => [
                            $response,
                        ],
                    ),
                ),
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => 'Selecciona una Opción:',
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '👉 Reportar Falla',
                                    ),
                                    array(
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => "Selecciona una Opción:",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "👉Reportar Falla",
                                                "value" => "Reportar Falla",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 Finalizar Consulta",
                                                "value" => "👌 Finalizar Consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "Selecciona una Opción:",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => 'Reportar Falla',
                                            "title" => '👉Reportar Falla',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 Finalizar Consulta',
                                            "title" => '👌 Finalizar Consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "payload" => array(
                        "chatWebLucy" => array(
                            "text" => $response,
                            "chips" => array(
                                array(
                                    "text" => "👉Reportar Falla",
                                    "input" => "Reportar Falla"
                                ),
                                array(
                                    "text" => "🔙 Regresar al Menú Principal",
                                    "input" => "🔙 Regresar al Menú Principal"
                                ),
                                array(
                                    "text" => "👌 Finalizar Consulta",
                                    "input" => "👌 Finalizar Consulta"
                                )
                            ),
                        ),
                    ),
                ),
            );

            $json['outputContexts'] = array(
                array(
                    "name" => $contextoNombre,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "niu_cuenta" => $niu,
                    ),
                ),
            );
        } else { //Se envia cuando si se encuentra alguna indisponibilidad
            //$json['fulfillmentText'] = $response . "A continuacion selecciona una opción:";
            //$json['displayText'] = $response . "\n A continuacion selecciona una opción:";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'text' => array(
                        'text' => [
                            $response,
                        ],
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👉 Si deseas reportar un daño presiona la opción *Reportar Falla.*",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => 'Reportar Falla',
                                            "title" => '👉Reportar Falla',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👉 Si deseas que te informemos sobre las interrupciones programadas para tu inmueble, da Click en la opción *Suscribirme.*",
                                    "buttons" => array(
                                        array(
                                            "type" => 'web_url',
                                            "url" => 'https://sgp.chec.com.co/InicioSuspencionesProgramadas.aspx',
                                            "title" => '💁‍♀ Suscribirme',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 Finalizar consulta',
                                            "title" => '👌 Finalizar consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),

                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => "Selecciona una opción:",
                            'reply_markup' => array(
                                'inline_keyboard' => array(
                                    array(

                                        array(
                                            "text" => "👩‍💻 Suscribirme",
                                            "url" => "https://sgp.chec.com.co/InicioSuspencionesProgramadas.aspx",
                                        ),
                                    ),
                                    array(

                                        array(
                                            "text" => "🔙 Buscar de nuevo",
                                            "callback_data" => "🔙 Buscar de nuevo",
                                        ),
                                    ),
                                    array(

                                        array(
                                            "text" => "👌 Finalizar Consulta",
                                            "callback_data" => "👌 Finalizar Consulta",
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => "Selecciona una opción:",
                                        "buttons" => array(
                                            array(
                                                "type" => "openUrl",
                                                "title" => "💁‍♀ Suscribirme",
                                                "value" => "http://www.chec.com.co/interrupciones?folderId=443&view=gridview&pageSize=10",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 Finalizar Consulta",
                                                "value" => "👌 Finalizar Consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "payload" => array(
                        "chatWebLucy" => array(
                            "text" => $response,
                            "chips" => array(
                                array(
                                    "text" => "👉Reportar Falla",
                                    "input" => "Reportar Falla"
                                )
                            ),
                        ),
                    ),
                ),
                array(
                    "payload" => array(
                        "chatWebLucy" => array(
                            "text" => "👉 Si deseas que te informemos sobre las interrupciones programadas para tu inmueble, da Click en la opción Suscribirme.",
                            "chips" => [
                                array(
                                    "type" => 'webUrl',
                                    "text" => '💁‍♀ Suscribirme',
                                    "webUrl" => 'https://sgp.chec.com.co/InicioSuspencionesProgramadas.aspx'
                                ),
                                array(
                                    "text" => '🔙 Buscar de nuevo',
                                    "input" => '🔙 Buscar de nuevo'
                                ),
                                array(
                                    "text" => '👌 Finalizar consulta',
                                    "input" => '👌 Finalizar consulta'
                                )
                            ]
                        ),
                    ),
                ),
            );

            $json['outputContexts'] = array(
                array(
                    "name" => $contextoNombre,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "niu_cuenta" => $niu,
                    ),
                ),
            );
        }

        return $json;
    }

    //c1_direccion_municipio
    //Metodo que busca el NIU de un usuario asociado con su direccion. Puede encontrar 1 solo registro y buscar, 2 o mas y mostrar una
    //lista de posibles nius encontrados, o indicar que no se encontro registro alguno.
    public function getIndisNiu($niu, $isTest, $nombreSalida)
    {
        $busqueda = $this->getNiuFromNiu($niu, $isTest);
        //Verificar si se obtuvo una sola cuenta
        /* if (isset($busqueda['NIU'])) {
        return $this->getIndisNiu($busqueda['NIU'], false);
        } */

        //Verificar si se obtuvo mas de una direccion('Nombre’) he encontrado varios registros con el número de (cédula) por favor selecciona el número de cuenta del inmueble a consultar…
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad) \, que trae la bd

            $arrayTel = array();
            $arrayRepliesFac = array();
            $buttonsFac1 = array();
            $buttonsFac2 = array();
            $arraySkypeButton = array();
            $arrayRepliesSky = array();
            $arrayChatWebButton = array();

            //iniciamos un contador para agregar los registros en un array con varias dimensiones
            //con esto podremos obtenerlos mas facil al momento de insertarlos en el mensaje de respuesta
            $sumatoria = 1;
            $address = "";
            $nocta = "";
            //recorrido de la informaicon que llega de la bd
            foreach ($busqueda['VARIOS'] as $key => $value) {

                //enmascaramiento de direcciones y cuentas para mostrar en botones
                $address = $this->recortAddress($value['DIRECCION']);

                //condicional requerido para el formato de los botones en el chat de facebook, solo permite 3 botones por iteracion
                if ($sumatoria <= 3) {
                    array_push($buttonsFac1, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                } else {
                    array_push($buttonsFac2, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                }

                // agragcion de los botones de skype
                array_push($arraySkypeButton, array(
                    "type" => 'imBack',
                    "title" => $address,
                    "value" => $value['NIU'],
                ));

                // agregacion de los botones de chatWebLucy
                array_push($arrayChatWebButton, array(
                    "text" => $address,
                    "input" => $value['NIU'],
                ));

                //definicion de variable array para creacion de los botones para telegram
                $buttonsTel = array(
                    array(
                        'text' => $address,
                        'callback_data' => $value['NIU'],
                    ),
                );
                array_push($arrayTel, $buttonsTel);

                $sumatoria++;
            }

            //se termina de asignar botones de termino para telegram
            /* $buttonsTel = array(
            array(
            'text' => '🔙 Buscar de nuevo',
            'callback_data' => '🔙 Buscar de nuevo',
            ),
            );

            array_push($arrayTel, $buttonsTel);
            $buttonsTel = array(
            array(
            'text' => '👌 He finalizado la consulta',
            'callback_data' => '👌 He finalizado la consulta',
            ),
            );
            array_push($arrayTel, $buttonsTel); */

            /*
            obtenemos cada uno de los array que van dentro del json de salida
            y cada uno de ellos lo agregamos al json de salida para la respuesta.

            Definimos la cantidad de arrays suficiente spara cubrir con la splataformas que se tienen
             */

            //definicion de mensaje de salida
            $mensajeSalida = array();

            //definicion de array de salida para facebook
            // $arraySalida3 = array(
            //     'type' => 0,
            //     'platform' => 'facebook',
            //     'text' => array(
            //         'text' => [
            //            "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad) \,);

            //definicion de array de salida para telegram
            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                        'reply_markup' => array(
                            'inline_keyboard' => $arrayTel,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Si no corresponde a la dirección del inmueble, verifica el número de cuenta CHEC y realiza nuevamente la búsqueda:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Buscar de nuevo',
                                    '🔙 Regresar al Menú Principal',
                                    '👌 He finalizado la consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                            'hide_keyboard' => true,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            //definicion de array de salida para skype

            /* for ($i = 1; $i < $sumatoria; $i++) {
            array_push($mensajeSalida, $arrayFac[$i]);
            } */

            /*
            salida d elos botones con las direcciones */
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                "buttons" => $buttonsFac1,
                            ),
                        ),
                    ),
                ),
            ));

            if (count($buttonsFac2)) {
                array_push($mensajeSalida, array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👇",
                                    "buttons" => $buttonsFac2,
                                ),
                            ),
                        ),
                    ),
                ));
            }

            //type buttons de skype

            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '🔄Buscar por Cuenta',
                "value" => '🔄Buscar por Cuenta',
            ));
            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '🔙Buscar de otra forma',
                "value" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '👌 Finalizar consulta',
                "value" => '👌 Finalizar consulta',
            ));

            //mensaje de salida de skype
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "text" => "",
                        "attachments" => array(
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "He encontrado los siguientes resultados. 👇 **Presiona sobre tu dirección**.\n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                    "buttons" => $arraySkypeButton,
                                ),
                            ),
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                    "buttons" => $arrayRepliesSky,
                                ),
                            ),
                        ),
                    ),
                ),
            ));

            // type buttons de facebook
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔄Buscar por Cuenta',
                "title" => '🔄Buscar por Cuenta',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔙Buscar de otra forma',
                "title" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '👌 Finalizar consulta',
                "title" => '👌 Finalizar consulta',
            ));
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                "buttons" => $arrayRepliesFac,
                            ),
                        ),
                    ),
                ),
            ));


            //salida chatWebLucy
            array_push($mensajeSalida, array(
                "payload" => array(
                    "chatWebLucy" => array(
                        "text" => "He encontrado los siguientes resultados. 👇 Presiona sobre tu dirección.\n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                        "chips" => $arrayChatWebButton
                    ),
                )
            ));

            array_push($mensajeSalida, array(
                "payload" => array(
                    "chatWebLucy" => array(
                        "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                        "chips" => array(
                            array(
                                "text" => "🔄Buscar por Cuenta",
                                "input" => "🔄Buscar por Cuenta"
                            ),
                            array(
                                "text" => "🔙Buscar de otra forma",
                                "input" => "🔙Buscar de otra forma"
                            ),
                            array(
                                "text" => "👌 Finalizar consulta",
                                "input" => "👌 Finalizar consulta"
                            )
                        )
                    )
                )
            ));

            /* //salida chatweb lucy
            array_push($mensajeSalida, array(
                "platform" => "PLATFORM_UNSPECIFIED",
                "text" => "He encontrado los siguientes resultados. 👇 Presiona sobre tu dirección. (Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                "chip" => $arrayChatWebButton
            ));
            array_push($mensajeSalida, array(
                "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                "chip" => array(
                    array(
                        "text" => "🔄Buscar por Cuenta",
                        "input" => "🔄Buscar por Cuenta"
                    ),
                    array(
                        "text" => "🔙Buscar de otra forma",
                        "input" => "🔙Buscar de otra forma"
                    ),
                    array(
                        "text" => "👌 Finalizar consulta",
                        "input" => "👌 Finalizar consulta"
                    )
                ),
            ));*/




            //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
            $json['fulfillmentMessages'] = $mensajeSalida;

            return $json;
        }
        //Verificar si no se encontro ninguna direccion Upppsss!!! ('Nombre’)… busco y busco y no encuentro ese número en mi base de datos 🤷‍… intentemos nuevamente. Digita tu cédula sin letras, puntos ni espacios.
        if (isset($busqueda['NINGUNO'])) {
            //$json['fulfillmentText'] = $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta";
            //$json['displayText'] = "No encuentro ningun registro asociado a esta nombre. Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario regresa al Menú Principal";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '🔙 Buscar de nuevo',
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                                'hide_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 He finalizado la consulta',
                                            "title" => '👌 He finalizado la consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 He finalizado la consulta",
                                                "value" => "👌 He finalizado la consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );
            return $json;
        }
    }

    //c1_direccion_municipio
    //Metodo que busca el NIU de un usuario asociado con su direccion. Puede encontrar 1 solo registro y buscar, 2 o mas y mostrar una
    //lista de posibles nius encontrados, o indicar que no se encontro registro alguno.
    public function getIndisAddress($direccion, $municipio, $nombreSalida)
    {
        $busqueda = $this->getNiuFromAddress($direccion, $municipio);
        //var_dump($busqueda);
        //Verificar si se obtuvo una sola cuenta
        /* if (isset($busqueda['NIU'])) {
        return $this->getIndisNiu($busqueda['NIU'], false);
        } */

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = $nombreSalida . " por favor verifica si la dirección pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            //definimos los arrays por cada una de las plataformas que tenemos para llenar con la informacion que trae la bd

            $arraySky[] = array();
            $arrayTel = array();
            $arrayRepliesFac = array();
            $buttonsFac1 = array();
            $buttonsFac2 = array();
            $buttonsSky = array();
            $arrayRepliesSky = array();

            //iniciamos un contador para agregar los registros en un array con varias dimensiones
            //con esto podremos obtenerlos mas facil al momento de insertarlos en el mensaje de respuesta
            $sumatoria = 1;
            $address = "";
            $nocta = "";
            //recorrido de la informaicon que llega de la bd

            foreach ($busqueda['VARIOS'] as $key => $value) {

                //enmascaramiento de direcciones y cuentas para mostrar en botones
                $address = $this->recortAddress($value['DIRECCION']);
                //condicional requerido para el formato de los botones en el chat de facebook, solo permite 3 botones por iteracion
                if ($sumatoria <= 3) {
                    array_push($buttonsFac1, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                } else {
                    array_push($buttonsFac2, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                }

                //definicion de variable array para creacion de los botones para skype
                // $buttonsSky = array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => '- Dir: ' . $value['DIRECCION'] . ' No cta: ',
                //     'replies' => array(
                //         $value['NIU'],
                //     ),
                // );

                // agragcion de los botones de skype
                array_push($buttonsSky, array(
                    "type" => 'imBack',
                    "title" => $address,
                    "value" => $value['NIU'],
                ));

                //definicion de variable array para creacion de los botones para telegram
                $buttonsTel = array(
                    array(
                        'text' => $address,
                        'callback_data' => $value['NIU'],
                    ),
                );
                array_push($arrayTel, $buttonsTel);

                //asignacion de los array creados anteriormente en un array generla que guarda en la dimension que se encuentre la sumatoria
                //solo aplica para facebook y skype
                //$arrayFac[$sumatoria] = $buttonsFac;
                //$arraySky[$sumatoria] = $buttonsSky;

                $sumatoria++;
            }

            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔄Buscar por Dirección',
                "title" => '🔄Buscar por Dirección',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔙Buscar de otra forma',
                "title" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '👌 Finalizar consulta',
                "title" => '👌 Finalizar consulta',
            ));

            /*
            obtenemos cada uno de los array que van dentro del json de salida
            y cada uno de ellos lo agregamos al json de salida para la respuesta.

            Definimos la cantidad de arrays suficiente spara cubrir con la splataformas que se tienen
             */

            //definicion de mensaje de salida
            $mensajeSalida = array();

            //definicion de array de salida para facebook
            /* $arraySalida3 = array(
            'type' => 0,
            'platform' => 'facebook',
            'text' => array(
            'text' => [
            $nombreSalida . " por favor verifica si la dirección pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ",
            ],
            ),
            );
            array_push($mensajeSalida, $arraySalida3);*/

            //definicion de array de salida para telegram
            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                        'reply_markup' => array(
                            'inline_keyboard' => $arrayTel,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Si no corresponde a la dirección del inmueble, verifica el municipio y la dirección que ingresaste y realiza nuevamente la búsqueda:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Buscar de nuevo',
                                    '🔙 Regresar al Menú Principal',
                                    '👌 He finalizado la consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                            'hide_keyboard' => true,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            //definicion de array de salida para skype
            // $arraySalida1 = array(
            //     'type' => 0,
            //     'platform' => 'skype',
            //     'speech' => $json['fulfillmentText'],
            // );
            // array_push($mensajeSalida, $arraySalida1);

            // for ($i = 1; $i < $sumatoria; $i++) {
            //     array_push($mensajeSalida, $arraySky[$i]);
            // }

            // $arraySalida2 = array(
            //     'type' => 2,
            //     'platform' => 'skype',
            //     'title' => 'Selecciona una opcion',
            //     'replies' => array(
            //         '🔙 Buscar de nuevo',
            //         '👌 He finalizado la consulta',
            //     ),
            // );
            //array_push($mensajeSalida, $arraySalida2);

            /* for ($i = 1; $i < $sumatoria; $i++) {
            array_push($mensajeSalida, $arrayFac[$i]);
            } */

            /*
            salida d elos botones con las direcciones */
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                "buttons" => $buttonsFac1,
                            ),
                        ),
                    ),
                ),
            ));

            if (count($buttonsFac2)) {
                array_push($mensajeSalida, array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👇",
                                    "buttons" => $buttonsFac2,
                                ),
                            ),
                        ),
                    ),
                ));
            }
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                "buttons" => $arrayRepliesFac,
                            ),
                        ),
                    ),
                ),
            ));

            //type buttons de skype

            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '🔄Buscar por Dirección',
                "value" => '🔄Buscar por Dirección',
            ));
            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '🔙Buscar de otra forma',
                "value" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '👌 Finalizar consulta',
                "value" => '👌 Finalizar consulta',
            ));

            //mensaje de salida de skype
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "text" => "",
                        "attachments" => array(
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "He encontrado los siguientes resultados. 👇 **Presiona sobre tu dirección**.\n (Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                    "buttons" => $buttonsSky,
                                ),
                            ),
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                    "buttons" => $arrayRepliesSky,
                                ),
                            ),
                        ),
                    ),
                ),
            ));

            //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
            $json['fulfillmentMessages'] = $mensajeSalida;

            return $json;
        }
        //Verificar si no se encontro ninguna direccion
        if (isset($busqueda['NINGUNO'])) {
            //$json['fulfillmentText'] = $nombreSalida . "… busco y busco y no encuentro esa dirección en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta";
            //$json['displayText'] = "No encuentro ningun registro asociado a esta nombre. Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario regresa al Menú Principal";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => $nombreSalida . "… busco y busco y no encuentro esa dirección en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '🔙 Buscar de nuevo',
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                                'hide_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                // array(
                //     'type' => 0,
                //     'platform' => 'skype',
                //     'speech' => $nombreSalida . "… busco y busco y no encuentro esa dirección en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                // ),
                // array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => 'Selecciona una opcion',
                //     'replies' => array(
                //         '🔙 Buscar de nuevo',
                //         '👌 He finalizado la consulta',
                //     ),
                // ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => $nombreSalida . "… busco y busco y no encuentro esa dirección en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 He finalizado la consulta',
                                            "title" => '👌 He finalizado la consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 He finalizado la consulta",
                                                "value" => "👌 He finalizado la consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );
            return $json;
        }
    }

    //c1_cc
    // Funcion para buscar Indisponibilidad con la cedula
    public function getIndisCC($cedula, $nombreSalida)
    {
        $busqueda = $this->getNiuFromCedula($cedula);
        //Verificar si se obtuvo una sola cuenta

        /* if (isset($busqueda['NIU'])) {
        return $this->getIndisNiu($busqueda['NIU'], false);
        } */

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenecen al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            //definimos los arrays por cada una de las plataformas que tenemos para llenar con la informacion que trae la bd

            $arraySky[] = array();
            $arrayTel = array();
            $arrayRepliesFac = array();
            $buttonsFac1 = array();
            $buttonsFac2 = array();
            $buttonsSky = array();
            $arrayRepliesSky = array();

            //iniciamos un contador para agregar los registros en un array con varias dimensiones
            //con esto podremos obtenerlos mas facil al momento de insertarlos en el mensaje de respuesta
            $sumatoria = 1;
            $address = "";
            $nocta = "";
            //recorrido de la informaicon que llega de la bd
            foreach ($busqueda['VARIOS'] as $key => $value) {

                //enmascaramiento de direcciones y cuentas para mostrar en botones
                $address = $this->recortAddress($value['DIRECCION']);

                //condicional requerido para el formato de los botones en el chat de facebook, solo permite 3 botones por iteracion
                if ($sumatoria <= 3) {
                    array_push($buttonsFac1, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                } else {
                    array_push($buttonsFac2, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                }

                //definicion de variable array para creacion de los botones para skype
                // $buttonsSky = array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => '- Dir: ' . $value['DIRECCION'] . ' No cta: ',
                //     'replies' => array(
                //         $value['NIU'],
                //     ),
                // );
                // agragcion de los botones de skype

                array_push($buttonsSky, array(
                    "type" => 'imBack',
                    "title" => $address,
                    "value" => $value['NIU'],
                ));

                //definicion de variable array para creacion de los botones para telegram
                $buttonsTel = array(
                    array(
                        'text' => $address,
                        'callback_data' => $value['NIU'],
                    ),
                );
                array_push($arrayTel, $buttonsTel);

                //asignacion de los array creados anteriormente en un array generla que guarda en la dimension que se encuentre la sumatoria
                //solo aplica para facebook y skype
                //$arrayFac[$sumatoria] = $buttonsFac;
                //$arraySky[$sumatoria] = $buttonsSky;

                $sumatoria++;
            }

            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔄Buscar por Cédula',
                "title" => '🔄Buscar por Cédula',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔙Buscar de otra forma',
                "title" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '👌 Finalizar consulta',
                "title" => '👌 Finalizar consulta',
            ));

            /*
            obtenemos cada uno de los array que van dentro del json de salida
            y cada uno de ellos lo agregamos al json de salida para la respuesta.

            Definimos la cantidad de arrays suficiente spara cubrir con la splataformas que se tienen
             */

            //definicion de mensaje de salida
            $mensajeSalida = array();
            //definicion de array de salida para facebook
            // $arraySalida3 = array(
            //     'type' => 0,
            //     'platform' => 'facebook',
            //     'text' => array(
            //         'text' => [
            //             $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenecen al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n",
            //         ],
            //     ),
            // );
            // array_push($mensajeSalida, $arraySalida3);

            //definicion de array de salida para telegram
            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad) ",
                        'reply_markup' => array(
                            'inline_keyboard' => $arrayTel,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Si no corresponde a la dirección del inmueble, verifica el número de cuenta CHEC y realiza nuevamente la búsqueda:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Buscar de nuevo',
                                    '🔙 Regresar al Menú Principal',
                                    '👌 He finalizado la consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                            'hide_keyboard' => true,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            //definicion de array de salida para skype
            // $arraySalida1 = array(
            //     'type' => 0,
            //     'platform' => 'skype',
            //     'speech' => $json['fulfillmentText'],
            // );
            // array_push($mensajeSalida, $arraySalida1);

            // for ($i = 1; $i < $sumatoria; $i++) {
            //     array_push($mensajeSalida, $arraySky[$i]);
            // }

            // $arraySalida2 = array(
            //     'type' => 2,
            //     'platform' => 'skype',
            //     'title' => 'Selecciona una opcion',
            //     'replies' => array(
            //         '🔙 Buscar de nuevo',
            //         '👌 He finalizado la consulta',
            //     ),
            // );
            //array_push($mensajeSalida, $arraySalida2);

            /* for ($i = 1; $i < $sumatoria; $i++) {
            array_push($mensajeSalida, $arrayFac[$i]);
            } */

            /*
            salida d elos botones con las direcciones */
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                "buttons" => $buttonsFac1,
                            ),
                        ),
                    ),
                ),
            ));

            if (count($buttonsFac2)) {
                array_push($mensajeSalida, array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👇",
                                    "buttons" => $buttonsFac2,
                                ),
                            ),
                        ),
                    ),
                ));
            }
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                "buttons" => $arrayRepliesFac,
                            ),
                        ),
                    ),
                ),
            ));

            //type buttons de skype

            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '🔄Buscar por Cédula',
                "value" => '🔄Buscar por Cédula',
            ));
            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '🔙Buscar de otra forma',
                "value" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesSky, array(
                "type" => 'imBack',
                "title" => '👌 Finalizar consulta',
                "value" => '👌 Finalizar consulta',
            ));

            //mensaje de salida de skype
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "text" => "",
                        "attachments" => array(
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "He encontrado los siguientes resultados. 👇 **Presiona sobre tu dirección**. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                    "buttons" => $buttonsSky,
                                ),
                            ),
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                    "buttons" => $arrayRepliesSky,
                                ),
                            ),
                        ),
                    ),
                ),
            ));

            //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
            $json['fulfillmentMessages'] = $mensajeSalida;

            return $json;
        }
        //Verificar si no se encontro ninguna direccion
        if (isset($busqueda['NINGUNO'])) {
            //$json['fulfillmentText'] = $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta";
            //$json['displayText'] = "No encuentro ningun registro asociado a esta nombre. Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario regresa al Menú Principal";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '🔙 Buscar de nuevo',
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                                'hide_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                // array(
                //     'type' => 0,
                //     'platform' => 'skype',
                //     'speech' => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                // ),
                // array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => 'Selecciona una opcion',
                //     'replies' => array(
                //         '🔙 Buscar de nuevo',
                //         '👌 He finalizado la consulta',
                //     ),
                //),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 He finalizado la consulta',
                                            "title" => '👌 He finalizado la consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 He finalizado la consulta",
                                                "value" => "👌 He finalizado la consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );
            return $json;
        }
    }

    //c1_nit
    // Funcion para buscar Indisponibilidad con el NIT
    public function getIndisNIT($cedula, $nombreSalida)
    {
        $busqueda = $this->getNiuFromNIT($cedula);
        //Verificar si se obtuvo una sola cuenta
        /* if (isset($busqueda['NIU'])) {
        return $this->getIndisNiu($busqueda['NIU'], false);
        } */

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            //definimos los arrays por cada una de las plataformas que tenemos para llenar con la informacion que trae la bd

            $arraySky[] = array();
            $arrayTel = array();
            $arrayRepliesFac = array();
            $buttonsFac1 = array();
            $buttonsFac2 = array();
            $buttonsSky = array();
            $arrayRepliesSkyn = array();

            //iniciamos un contador para agregar los registros en un array con varias dimensiones
            //con esto podremos obtenerlos mas facil al momento de insertarlos en el mensaje de respuesta
            $sumatoria = 1;
            $address = "";
            $nocta = "";
            //recorrido de la informaicon que llega de la bd
            foreach ($busqueda['VARIOS'] as $key => $value) {

                //enmascaramiento de direcciones y cuentas para mostrar en botones
                $address = $this->recortAddress($value['DIRECCION']);

                //condicional requerido para el formato de los botones en el chat de facebook, solo permite 3 botones por iteracion
                if ($sumatoria <= 3) {
                    array_push($buttonsFac1, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                } else {
                    array_push($buttonsFac2, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                }

                //definicion de variable array para creacion de los botones para skype
                // $buttonsSky = array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => '- Dir: ' . $value['DIRECCION'] . ' No cta: ',
                //     'replies' => array(
                //         $value['NIU'],
                //     ),
                // );

                // agragcion de los botones de skype
                array_push($buttonsSky, array(
                    "type" => "imBack",
                    "title" => $address,
                    "value" => $value['NIU'],
                ));

                //definicion de variable array para creacion de los botones para telegram
                $buttonsTel = array(
                    array(
                        'text' => $address,
                        'callback_data' => $value['NIU'],
                    ),
                );
                array_push($arrayTel, $buttonsTel);

                //asignacion de los array creados anteriormente en un array generla que guarda en la dimension que se encuentre la sumatoria
                //solo aplica para facebook y skype
                //$arrayFac[$sumatoria] = $buttonsFac;
                //$arraySky[$sumatoria] = $buttonsSky;

                $sumatoria++;
            }

            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔄Buscar por NIT',
                "title" => '🔄Buscar por NIT',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔙Buscar de otra forma',
                "title" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '👌 Finalizar consulta',
                "title" => '👌 Finalizar consulta',
            ));

            /*
            obtenemos cada uno de los array que van dentro del json de salida
            y cada uno de ellos lo agregamos al json de salida para la respuesta.

            Definimos la cantidad de arrays suficiente spara cubrir con la splataformas que se tienen
             */

            //definicion de mensaje de salida
            $mensajeSalida = array();

            //definicion de array de salida para facebook
            /*$arraySalida3 = array(
            'type' => 0,
            'platform' => 'facebook',
            'text' => array(
            'text' => [
            $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ",
            ],
            ),
            );
            array_push($mensajeSalida, $arraySalida3);*/

            //definicion de array de salida para telegram
            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                        'reply_markup' => array(
                            'inline_keyboard' => $arrayTel,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Si no corresponde a la dirección del inmueble, verifica el número de cuenta CHEC y realiza nuevamente la búsqueda:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Buscar de nuevo',
                                    '🔙 Regresar al Menú Principal',
                                    '👌 He finalizado la consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                            'hide_keyboard' => true,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            //definicion de array de salida para skype
            // $arraySalida1 = array(
            //     'type' => 0,
            //     'platform' => 'skype',
            //     'speech' => $json['fulfillmentText'],
            // );
            // array_push($mensajeSalida, $arraySalida1);

            // for ($i = 1; $i < $sumatoria; $i++) {
            //     array_push($mensajeSalida, $arraySky[$i]);
            // }

            // $arraySalida2 = array(
            //     'type' => 2,
            //     'platform' => 'skype',
            //     'title' => 'Selecciona una opcion',
            //     'replies' => array(
            //         '🔙 Buscar de nuevo',
            //         '👌 He finalizado la consulta',
            //     ),
            // );
            // array_push($mensajeSalida, $arraySalida2);

            /* for ($i = 1; $i < $sumatoria; $i++) {
            array_push($mensajeSalida, $arrayFac[$i]);
            } */

            /*
            salida d elos botones con las direcciones */
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                "buttons" => $buttonsFac1,
                            ),
                        ),
                    ),
                ),
            ));

            if (count($buttonsFac2)) {
                array_push($mensajeSalida, array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👇",
                                    "buttons" => $buttonsFac2,
                                ),
                            ),
                        ),
                    ),
                ));
            }
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                "buttons" => $arrayRepliesFac,
                            ),
                        ),
                    ),
                ),
            ));

            //type buttons de skype
            array_push($arrayRepliesSkyn, array(
                "type" => 'imBack',
                "title" => '🔙 Buscar de nuevo',
                "value" => '🔙 Buscar de nuevo',
            ));
            array_push($arrayRepliesSkyn, array(
                "type" => 'imBack',
                "title" => '🔙 Regresar al Menú Principal',
                "value" => '🔙 Regresar al Menú Principal',
            ));
            array_push($arrayRepliesSkyn, array(
                "type" => 'imBack',
                "title" => '👌 He finalizado la consulta',
                "value" => '👌 He finalizado la consulta',
            ));

            //mensaje de salida de skype
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "text" => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*.\n",
                        "attachments" => array(
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                    "buttons" => $buttonsSky,
                                ),
                            ),
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                    "buttons" => $arrayRepliesSkyn,
                                ),
                            ),
                        ),
                    ),
                ),
            ));

            //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
            $json['fulfillmentMessages'] = $mensajeSalida;

            return $json;
        }
        //Verificar si no se encontro ninguna direccion
        if (isset($busqueda['NINGUNO'])) {
            //$json['fulfillmentText'] = $nombreSalida . "… busco y busco y no encuentro ese NIT en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta";
            //$json['displayText'] = "No encuentro ningun registro asociado a esta nombre. Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario regresa al Menú Principal";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => $nombreSalida . "… busco y busco y no encuentro ese NIT en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '🔙 Buscar de nuevo',
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                                'hide_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                // array(
                //     'type' => 0,
                //     'platform' => 'skype',
                //     'speech' => $nombreSalida . "… busco y busco y no encuentro ese NIT en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                // ),
                // array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => 'Selecciona una opcion',
                //     'replies' => array(
                //         '🔙 Buscar de nuevo',
                //         '👌 He finalizado la consulta',
                //     ),
                // ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => $nombreSalida . "… busco y busco y no encuentro ese NIT en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 He finalizado la consulta',
                                            "title" => '👌 He finalizado la consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "plaform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 He finalizado la consulta",
                                                "value" => "👌 He finalizado la consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );
            return $json;
        }
    }

    //c1_nombre
    // Funcion para buscar Indisponibilidad con el Nombre
    public function getIndisNombre($nombre, $municipio, $isTest, $nombreSalida)
    {
        //$this->sendAlertSGOerror('Prueba para envio de correo electronico');

        $nombre = $this->deleteSymbols($nombre);

        $palabras = explode(" ", strtoupper($nombre));
        $busqueda = $this->getNiuFromName($palabras, $municipio);

        //Verificar si se obtuvo una sola cuenta
        /* if (isset($busqueda['NIU'])) {
        return $this->getIndisNiu($busqueda['NIU'], $isTest);
        } */

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {
            //$json['fulfillmentText'] = $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            //definimos los arrays por cada una de las plataformas que tenemos para llenar con la informacion que trae la bd

            $arraySky[] = array();
            $arrayTel = array();
            $arrayRepliesFac = array();
            $buttonsFac1 = array();
            $buttonsFac2 = array();
            $buttonsSky = array();
            $arrayRepliesSkyNm = array();

            //iniciamos un contador para agregar los registros en un array con varias dimensiones
            //con esto podremos obtenerlos mas facil al momento de insertarlos en el mensaje de respuesta
            $sumatoria = 1;
            $address = "";
            $nocta = "";
            //recorrido de la informaicon que llega de la bd
            foreach ($busqueda['VARIOS'] as $key => $value) {

                //enmascaramiento de direcciones y cuentas para mostrar en botones
                $address = $this->recortAddress($value['DIRECCION']);

                //condicional requerido para el formato de los botones en el chat de facebook, solo permite 3 botones por iteracion
                if ($sumatoria <= 3) {
                    array_push($buttonsFac1, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                } else {
                    array_push($buttonsFac2, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                }

                //definicion de variable array para creacion de los botones para skype
                // $buttonsSky = array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => '- Dir: ' . $value['DIRECCION'] . ' No cta: ',
                //     'replies' => array(
                //         $value['NIU'],
                //     ),
                // );

                array_push($buttonsSky, array(
                    "type" => "imBack",
                    "title" => $address,
                    "value" => $value['NIU'],
                ));

                //definicion de variable array para creacion de los botones para telegram
                $buttonsTel = array(
                    array(
                        'text' => $address,
                        'callback_data' => $value['NIU'],
                    ),
                );
                array_push($arrayTel, $buttonsTel);

                //asignacion de los array creados anteriormente en un array generla que guarda en la dimension que se encuentre la sumatoria
                //solo aplica para facebook y skype
                //$arrayFac[$sumatoria] = $buttonsFac;
                //$arraySky[$sumatoria] = $buttonsSky;

                $sumatoria++;
            }

            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔄Buscar por Nombre',
                "title" => '🔄Buscar por Nombre',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔙Buscar de otra forma',
                "title" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '👌 Finalizar consulta',
                "title" => '👌 Finalizar consulta',
            ));

            /*
            obtenemos cada uno de los array que van dentro del json de salida
            y cada uno de ellos lo agregamos al json de salida para la respuesta.

            Definimos la cantidad de arrays suficiente spara cubrir con la splataformas que se tienen
             */

            //definicion de mensaje de salida
            $mensajeSalida = array();

            //definicion de array de salida para facebook
            /* $arraySalida3 = array(
            'type' => 0,
            'platform' => 'facebook',
            'text' => array(
            'text' => [
            $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad), "."\n ",
            ],
            ),
            );
            array_push($mensajeSalida, $arraySalida3);*/

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                        'reply_markup' => array(
                            'inline_keyboard' => $arrayTel,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Si no corresponde a la dirección del inmueble, verifica el número de cuenta CHEC y realiza nuevamente la búsqueda:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Buscar de nuevo',
                                    '🔙 Regresar al Menú Principal',
                                    '👌 He finalizado la consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                            'hide_keyboard' => true,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            //definicion de array de salida para skype
            // $arraySalida1 = array(
            //     'type' => 0,
            //     'platform' => 'skype',
            //     'speech' => $json['fulfillmentText'],
            // );
            // array_push($mensajeSalida, $arraySalida1);

            // for ($i = 1; $i < $sumatoria; $i++) {
            //     array_push($mensajeSalida, $arraySky[$i]);
            // }

            // $arraySalida2 = array(
            //     'type' => 2,
            //     'platform' => 'skype',
            //     'title' => 'Selecciona una opcion',
            //     'replies' => array(
            //         '🔙 Buscar de nuevo',
            //         '👌 He finalizado la consulta',
            //     ),
            // );
            // array_push($mensajeSalida, $arraySalida2);

            /* for ($i = 1; $i < $sumatoria; $i++) {
            array_push($mensajeSalida, $arrayFac[$i]);
            } */

            /*
            salida d elos botones con las direcciones */
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                "buttons" => $buttonsFac1,
                            ),
                        ),
                    ),
                ),
            ));

            if (count($buttonsFac2)) {
                array_push($mensajeSalida, array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👇",
                                    "buttons" => $buttonsFac2,
                                ),
                            ),
                        ),
                    ),
                ));
            }
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                "buttons" => $arrayRepliesFac,
                            ),
                        ),
                    ),
                ),
            ));

            //type buttons de skype

            array_push($arrayRepliesSkyNm, array(
                "type" => 'imBack',
                "title" => '🔄Buscar por Nombre',
                "value" => '🔄Buscar por Nombre',
            ));
            array_push($arrayRepliesSkyNm, array(
                "type" => 'imBack',
                "title" => '🔙Buscar de otra forma',
                "value" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesSkyNm, array(
                "type" => 'imBack',
                "title" => '👌 Finalizar consulta',
                "value" => '👌 Finalizar consulta',
            ));

            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "text" => "",
                        "attachments" => array(
                            array(
                                "contentType" => "application/vnd.microsoft.card.hero",
                                "content" => array(
                                    "text" => "He encontrado los siguientes resultados. 👇 **Presiona sobre tu dirección**. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                    "buttons" => $buttonsSky,
                                ),
                            ),
                            array(
                                "contentType" => "application/vnd.microsoft.card.hero",
                                "content" => array(
                                    "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                    "buttons" => $arrayRepliesSkyNm,
                                ),
                            ),
                        ),
                    ),
                ),
            ));

            //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
            $json['fulfillmentMessages'] = $mensajeSalida;

            return $json;
        }
        //Verificar si no se encontro ninguna direccion
        if (isset($busqueda['NINGUNO'])) {
            //$json['fulfillmentText'] = $nombreSalida . "… busco y busco y no encuentro ese nombre en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta";
            //$json['displayText'] = "No encuentro ningun registro asociado a esta nombre. Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario regresa al Menú Principal";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => $nombreSalida . "… busco y busco y no encuentro ese nombre en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '🔙 Buscar de nuevo',
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                                'hide_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                // array(
                //     'type' => 0,
                //     'platform' => 'skype',
                //     'speech' => $nombreSalida . "… busco y busco y no encuentro ese nombre en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                // ),
                // array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => 'Selecciona una opcion',
                //     'replies' => array(
                //         '🔙 Buscar de nuevo',
                //         '👌 He finalizado la consulta',
                //     ),
                // ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => $nombreSalida . "… busco y busco y no encuentro ese nombre en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 He finalizado la consulta',
                                            "title" => '👌 He finalizado la consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 He finalizado la consulta",
                                                "value" => "👌 He finalizado la consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );
            return $json;
        }
    }

    //c1_tel_municipio
    // Funcion para buscar Indisponibilidad con el  telefono
    public function getIndisTelefono($telefono, $isTest, $nombreSalida)
    {
        //esta variable llama a metodo para comprobar si el numero de telefono corresponde al municipio de busqueda

        $busqueda = $this->getNiuFromPhone($telefono);
        //Verificar si se obtuvo una sola cuenta
        /* if (isset($busqueda['NIU'])) {
        return $this->getIndisNiu($busqueda['NIU'], $isTest);
        } */

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            //definimos los arrays por cada una de las plataformas que tenemos para llenar con la informacion que trae la bd

            $arraySky[] = array();
            $arrayTel = array();
            $arrayRepliesFac = array();
            $buttonsFac1 = array();
            $buttonsFac2 = array();
            $buttonsSky = array();
            $arrayRepliesSkT = array();

            //iniciamos un contador para agregar los registros en un array con varias dimensiones
            //con esto podremos obtenerlos mas facil al momento de insertarlos en el mensaje de respuesta
            $sumatoria = 1;
            $address = "";
            $nocta = "";
            //recorrido de la informaicon que llega de la bd
            foreach ($busqueda['VARIOS'] as $key => $value) {

                //enmascaramiento de direcciones y cuentas para mostrar en botones
                $address = $this->recortAddress($value['DIRECCION']);

                //condicional requerido para el formato de los botones en el chat de facebook, solo permite 3 botones por iteracion
                if ($sumatoria <= 3) {
                    array_push($buttonsFac1, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                } else {
                    array_push($buttonsFac2, array(
                        "type" => 'postback',
                        "payload" => $value['NIU'],
                        "title" => $address,
                    ));
                }

                //definicion de variable array para creacion de los botones para skype
                // $buttonsSky = array(
                //     'type' => 2,
                //     'platform' => 'skype',
                //     'title' => '- Dir: ' . $value['DIRECCION'] . ' No cta: ',
                //     'replies' => array(
                //         $value['NIU'],
                //     ),
                // );

                // agragcion de los botones de skype
                array_push($buttonsSky, array(
                    "type" => 'imBack',
                    "title" => $address,
                    "value" => $value['NIU'],
                ));

                //definicion de variable array para creacion de los botones para telegram
                $buttonsTel = array(
                    array(
                        'text' => $address,
                        'callback_data' => $value['NIU'],
                    ),
                );
                array_push($arrayTel, $buttonsTel);

                //asignacion de los array creados anteriormente en un array generla que guarda en la dimension que se encuentre la sumatoria
                //solo aplica para facebook y skype
                //$arrayFac[$sumatoria] = $buttonsFac;
                //$arraySky[$sumatoria] = $buttonsSky;

                $sumatoria++;
            }

            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔄Buscar por Teléfono',
                "title" => '🔄Buscar por Teléfono',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '🔙Buscar de otra forma',
                "title" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesFac, array(
                "type" => 'postback',
                "payload" => '👌 Finalizar consulta',
                "title" => '👌 Finalizar consulta',
            ));

            /*
            obtenemos cada uno de los array que van dentro del json de salida
            y cada uno de ellos lo agregamos al json de salida para la respuesta.

            Definimos la cantidad de arrays suficiente spara cubrir con la splataformas que se tienen
             */

            //definicion de mensaje de salida
            $mensajeSalida = array();

            //definicion de array de salida para facebook
            /* $arraySalida3 = array(
            'type' => 0,
            'platform' => 'facebook',
            'text' => array(
            'text' => [
            $nombreSalida . " por favor verifica si alguna de las siguientes direcciones pertenece al inmueble que deseas consultar (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ",
            ],
            ),
            );
            array_push($mensajeSalida, $arraySalida3);*/

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                        'reply_markup' => array(
                            'inline_keyboard' => $arrayTel,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            $arrayTelegramSalida = array(
                'type' => 4,
                'platform' => 'telegram',
                'payload' => array(
                    'telegram' => array(
                        'text' => 'Si no corresponde a la dirección del inmueble, verifica el número de cuenta CHEC y realiza nuevamente la búsqueda:',
                        'reply_markup' => array(
                            'keyboard' => array(
                                array(
                                    '🔙 Buscar de nuevo',
                                    '🔙 Regresar al Menú Principal',
                                    '👌 He finalizado la consulta',
                                ),
                            ),
                            'one_time_keyboard' => true,
                            'resize_keyboard' => true,
                            'hide_keyboard' => true,
                        ),
                    ),
                ),
            );
            array_push($mensajeSalida, $arrayTelegramSalida);

            //definicion de array de salida para skype
            // $arraySalida1 = array(
            //     'type' => 0,
            //     'platform' => 'skype',
            //     'speech' => $json['fulfillmentText'],
            // );
            // array_push($mensajeSalida, $arraySalida1);

            // for ($i = 1; $i < $sumatoria; $i++) {
            //     array_push($mensajeSalida, $arraySky[$i]);
            // }

            // $arraySalida2 = array(
            //     'type' => 2,
            //     'platform' => 'skype',
            //     'title' => 'Selecciona una opcion',
            //     'replies' => array(
            //         '🔙 Buscar de nuevo',
            //         '👌 He finalizado la consulta',
            //     ),
            // );
            //array_push($mensajeSalida, $arraySalida2);

            /* for ($i = 1; $i < $sumatoria; $i++) {
            array_push($mensajeSalida, $arrayFac[$i]);
            } */

            /*
            salida d elos botones con las direcciones */
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                'text' => "He encontrado los siguientes resultados. 👇 *Presiona sobre tu dirección*. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                "buttons" => $buttonsFac1,
                            ),
                        ),
                    ),
                ),
            ));

            if (count($buttonsFac2)) {
                array_push($mensajeSalida, array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => "👇",
                                    "buttons" => $buttonsFac2,
                                ),
                            ),
                        ),
                    ),
                ));
            }
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "facebook",
                "payload" => array(
                    "facebook" => array(
                        "attachment" => array(
                            "type" => "template",
                            "payload" => array(
                                "template_type" => "button",
                                "text" => "Si no encuentras tu dirección, inténtalo nuevamente y especifica más tu búsqueda.",
                                "buttons" => $arrayRepliesFac,
                            ),
                        ),
                    ),
                ),
            ));

            //type buttons de skype

            array_push($arrayRepliesSkT, array(
                "type" => 'imBack',
                "title" => '🔄Buscar por Teléfono',
                "value" => '🔄Buscar por Teléfono',
            ));
            array_push($arrayRepliesSkT, array(
                "type" => 'imBack',
                "title" => '🔙Buscar de otra forma',
                "value" => '🔙Buscar de otra forma',
            ));
            array_push($arrayRepliesSkT, array(
                "type" => 'imBack',
                "title" => '👌 Finalizar consulta',
                "value" => '👌 Finalizar consulta',
            ));

            //mensaje de salida de skype
            array_push($mensajeSalida, array(
                "type" => 4,
                "platform" => "skype",
                "payload" => array(
                    "skype" => array(
                        "type" => "message",
                        "text" => "",
                        "attachments" => array(
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "He encontrado los siguientes resultados. 👇 **Presiona sobre tu dirección**. \n(Por cuestiones de seguridad no mostramos los datos en su totalidad)",
                                    "buttons" => $buttonsSky,
                                ),
                            ),
                            array(
                                "contentType" => 'application/vnd.microsoft.card.hero',
                                "content" => array(
                                    "text" => "Si no encuentras tu dirección inténtalo nuevamente",
                                    "buttons" => $arrayRepliesSkT,
                                ),
                            ),
                        ),
                    ),
                ),
            ));

            //MENSAJE DE SALIDA FINAL, lo igualamos al array que hemos construido
            $json['fulfillmentMessages'] = $mensajeSalida;

            return $json;
        }
        //Verificar si no se encontro ninguna direccion
        if (isset($busqueda['NINGUNO'])) {
            //$json['fulfillmentText'] = $nombreSalida . "… busco y busco y no encuentro ese teléfono en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta";
            //$json['displayText'] = "No encuentro ningun registro asociado a esta nombre. Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario regresa al Menú Principal";
            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 4,
                    'platform' => 'telegram',
                    'payload' => array(
                        'telegram' => array(
                            'text' => $nombreSalida . "… busco y busco y no encuentro ese teléfono en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                            'reply_markup' => array(
                                'keyboard' => array(
                                    array(
                                        '🔙 Buscar de nuevo',
                                        '🔙 Regresar al Menú Principal',
                                        '👌 He finalizado la consulta',
                                    ),
                                ),
                                'one_time_keyboard' => true,
                                'resize_keyboard' => true,
                                'hide_keyboard' => true,
                            ),
                        ),
                    ),
                ),
                array(
                    'type' => 0,
                    'platform' => 'skype',
                    'speech' => $nombreSalida . "… busco y busco y no encuentro ese teléfono en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                ),
                array(
                    'type' => 2,
                    'platform' => 'skype',
                    'title' => 'Selecciona una opcion',
                    'replies' => array(
                        '🔙 Buscar de nuevo',
                        '👌 He finalizado la consulta',
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "facebook",
                    "payload" => array(
                        "facebook" => array(
                            "attachment" => array(
                                "type" => "template",
                                "payload" => array(
                                    "template_type" => "button",
                                    "text" => $nombreSalida . "… busco y busco y no encuentro ese teléfono en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                    "buttons" => array(
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Buscar de nuevo',
                                            "title" => '🔙 Buscar de nuevo',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '🔙 Regresar al Menú Principal',
                                            "title" => '🔙 Regresar al Menú Principal',
                                        ),
                                        array(
                                            "type" => 'postback',
                                            "payload" => '👌 He finalizado la consulta',
                                            "title" => '👌 He finalizado la consulta',
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
                array(
                    "type" => 4,
                    "platform" => "skype",
                    "payload" => array(
                        "skype" => array(
                            "type" => "message",
                            "attachments" => array(
                                array(
                                    "contentType" => "application/vnd.microsoft.card.hero",
                                    "content" => array(
                                        "text" => $nombreSalida . "… busco y busco y no encuentro ese número en mi base de datos 🤷‍… Para realizar una nueva búsqueda presiona 'Buscar de nuevo', de lo contrario Finaliza la consulta",
                                        "buttons" => array(
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Buscar de nuevo",
                                                "value" => "🔙 Buscar de nuevo",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "🔙 Regresar al Menú Principal",
                                                "value" => "🔙 Regresar al Menú Principal",
                                            ),
                                            array(
                                                "type" => "imBack",
                                                "title" => "👌 He finalizado la consulta",
                                                "value" => "👌 He finalizado la consulta",
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            );
            return $json;
        }
    }

    //-----------------------------------------------------------------------------

    // ------------------------------- búsqueda A FUENTES DE DATOS ----------------------------------
    //metodo que obtiene las indisponibilidades con el NIU. Se diferencia de getIndisNiu, en cuanto a que esta
    //puede ser reutilizada en otros parametros
    public function getIndisponibilidad($niu, $isTest, $solicitante, $nombreSalida)
    {
        $susp = getSuspEfectiva($this->con, $niu);

        $msg = "";
        $msg2 = array();

        if (!is_array($susp)) {
            if ($susp->VALOR == "s") {
                // Carga de resultado de suspension efectiva
                if (!$isTest) {
                    $this->setLogResultadoconNiu('Suspension Efectiva', $niu);
                }
                if ($solicitante == 'CHATBOT USUARIOS') {
                    $msg .= "\n🔷" . $nombreSalida . " para el inmueble que me indicas $niu, el servicio se encuentra suspendido desde: $susp->HORA_FIN por alguno de los siguientes motivos: \n - Falta de pago \n - Solicitud del cliente \n - Revisión técnica." . "\n";
                    return $msg;
                } else if ($solicitante == 'BPMCO') {
                    $msg2['fuente'] = 'Suspension Efectiva';
                    $msg2['fecha_inicio'] = $susp->HORA_INI;
                    $msg2['fecha_fin'] = $susp->HORA_FIN;
                    return $msg2;
                }
            } else {
                //Invocar metodo para buscar interrupcion programada
                return $this->getSuspensionesProgramadas($niu, $isTest, $solicitante, $nombreSalida);
            }
        } else {
            //Invocar metodo para buscar interrupcion programada
            return $this->getSuspensionesProgramadas($niu, $isTest, $solicitante, $nombreSalida);
        }
    }

    //Metodo que obtiene las suspensiones programadas teniendo el NIU. Reutilizable
    public function getSuspensionesProgramadas($niu, $isTest, $solicitante, $nombreSalida)
    {
        $prog = getSuspProgramada($this->con, $niu);
        $msg = "";
        $msg2 = array();
        if (!is_array($prog) || count($prog) > 0) {
            // Carga de resultado suspension programada
            if (!$isTest) {
                $this->setLogResultadoconNiu('Suspension Programada', $niu);
            }
            if ($solicitante == 'CHATBOT USUARIOS') {
                $msg .= "\n " . $nombreSalida . " tienes programado para tu inmueble 🤷:";
                foreach ($prog as $p) {
                    $msg .= "\n🔹 _Interrupción del servicio que inicia el " . $p->FECHA_INICIO . " a las " . $p->HORA_INICIO . ", y finaliza el " . $p->FECHA_FIN . " a las " . $p->HORA_FIN . "._";
                }
                return $msg . "\n";
            } else if ($solicitante == 'BPMCO') {
                foreach ($prog as $p) {
                    $tem['fuente'] = 'Suspension Programada';
                    $tem['fecha_inicio'] = $p->FECHA_INICIO . " " . $p->HORA_INICIO;
                    $tem['fecha_fin'] = $p->FECHA_FIN . " a las " . $p->HORA_FIN;
                    array_push($msg2, $tem);
                    //$msg .= "\nPara el inmueble No $niu consultado encontre las siguientes interrupciones del servicio de energia programadas:\n🔷 Hay una interrupcion programada que inicia el " . $p->FECHA_INICIO . " a las " . $p->HORA_INICIO . ", y finaliza el " . $p->FECHA_FIN . " a las " . $p->HORA_FIN;
                }
                return $msg2;
            }
        } else {
            //Invocar metodo para buscar interr scada

            /* NO SE VALIDARÁ LAS INTERRUPICONES DE CIRCUITO EN EL CHATBOT
            ESTO PARA MEJORAR LOS TIEMPOS DE EJECUCIÓN DE CONSULTA
             */
            //return $this->getInterrupCircuito($niu, $isTest, $solicitante,$nombreSalida);

            /* SE VALIDARÁ SOLO PROGRAMADAS, EFECTIVAS Y EL WEB SERVICE DEL SGO PARA BUSCAR INTERRUPICONES DEL SERVICIO */
            //return "en este momento no me reporta ninguna falla del servicio en tu sector, Si deseas reportar un daño por favor selecciona la opcion de reportes de daños:  ";
            //return "$nombreSalida en este momento para el inmueble consultado encontre que se ha normalizado el servicio de energía recientemente.🤷 \n🔷 Si continuas sin energía, selecciona la opción de reporte de daños. ";
            return $this->getSGO($niu, $isTest, $solicitante, $nombreSalida);
        }
    }

    //Metodo que obtiene las interrupciones a nivel de circuito SCADA teniendo el NIU. Reutilizable
    public function getInterrupCircuito($niu, $isTest, $solicitante, $nombreSalida)
    {
        $circuito = getSuspCircuito($this->con, $niu);
        $msg = "";
        $msg2 = array();
        if (!is_array($circuito) && ($circuito->ESTADO == "ABIERTO" || $circuito->ESTADO == "APERTURA")) {
            //Carga de resultado indisponibilidad a nivel de circuito
            if (!$isTest) {
                $this->setLogResultadoconNiu('Indisponibilidad a nivel de Circuito', $niu);
            }

            if ($solicitante == 'CHATBOT USUARIOS') {
                $msg .= "\n" . "🔹 Para el inmueble No $niu consultado encontre que se reporto la siguiente falla en el servicio de energia: \n🔷 Hay una falla en el circuito reportada el " . $circuito->FECHA . " a las " . $circuito->HORA . ". Estamos trabajando para reestablecer el servicio lo mas pronto posible." . "\n";
                return $msg;
            } else if ($solicitante == 'BPMCO') {
                $msg2['fuente'] = 'Indisponibilidad a nivel de Circuito';
                $msg2['fecha_inicio'] = $circuito->FECHA . " " . $circuito->HORA;
                $msg2['fecha_fin'] = "";
                //$msg .= "\nPara el inmueble No $niu consultado encontre las siguientes interrupciones del servicio de energia programadas:\n🔷 Hay una interrupcion programada que inicia el " . $p->FECHA_INICIO . " a las " . $p->HORA_INICIO . ", y finaliza el " . $p->FECHA_FIN . " a las " . $p->HORA_FIN;

                return $msg2;
            }
        } else {
            //Invocar metodo para buscar interr SGO
            return $this->getSGO($niu, $isTest, $solicitante, '');
            //return "$nombreSalida en este momento tenemos problemas en las consultas de indisponibilidades del servicio. Agradecemos tu compresión.🤷 \n🔷 Si deseas reportar un daño, selecciona la opción de reporte de daños. ";
            //Comentar los siguientes metodos cuando se habilite el SGO
            //$this->setLogResultado('Sin Indisponibilidad Reportada', $solicitante);
            //return "en este momento no me reporta ninguna falla del servicio en tu sector, Si deseas reportar un daño por favor selecciona la opcion de reportes de daños:  ";
        }
    }

    //Metodo que obtiene las interrupciones a nivel de nodo SGO teniendo el NIU. Reutilizable
    public function getSGO($niu, $isTest, $solicitante, $nombreSalida)
    {
        try {
            $res = $this->consultarIndisponibilidad($niu);
            if (substr($res->NombreSuscriptor, 0, 5) != "ERROR") {
                //Validar si se encuentra una indisponibilidad en el SGO
                if ($res->TipoEvento == 'Indisponibibilidad') {
                    //Carga de resultado indisponibilidad a nivel nodo
                    if (!$isTest) {
                        $this->setLogResultadoconNiu('Indisponibilidad a nivel de Nodo', $niu);
                    }

                    $fecha = "";
                    $time = explode(" ", $res->Fecha);
                    if (is_array($time)) {
                        $fecha = $time[0] . " a las " . $time[1] . ".";
                    }

                    $msg = "\n" . "$nombreSalida _en este momento se presenta una falla en el servicio de energía_. 👷‍♂ Nuestro personal se encuentra trabajando en restablecer el servicio lo antes posible." . "\n";

                    /* if ($res->Orden == 1) {
                    $msg .= "\n Ya tenemos una de nuetras cuadrillas en camino para solucionar este inconveniente.";
                    } */
                    return $msg;
                } else if ($res->TipoEvento == 'Normalización') {
                    //No hay carga de indisponibilidad
                    if (strlen($res->Fecha) > 0) {
                        $myDateTime = DateTime::createFromFormat('d/m/Y H:i:s', $res->Fecha);
                        $fechaIndis = $myDateTime->format('Y-m-d H:i:s');
                        $fecha2 = strtotime('-24 hour', strtotime(date("Y-m-d H:i:s")));
                        $fecha2 = date('Y-m-d H:i:s', $fecha2);

                        if ($fechaIndis > $fecha2) {
                            $msg = "$nombreSalida en este momento para el inmueble consultado encontre que se ha normalizado el servicio de energía recientemente.🤷 \n🔷 Si continuas sin energía, selecciona la opción de reporte de daños. ";
                        } else {
                            $msg = "$nombreSalida en este momento no me registra ninguna suspensión ni me reporta ninguna falla del servicio en tu sector,👩‍💻 si deseas reportar un daño por favor selecciona la opcion Reportar Falla. ";
                        }
                    } else {
                        $msg = "$nombreSalida en este momento no me registra ninguna suspensión ni me reporta ninguna falla del servicio en tu sector,👩‍💻 si deseas reportar un daño por favor selecciona la opcion de Reportar Falla. ";
                    }
                    if (!$isTest) {
                        $this->setLogResultadoconNiu('Sin Indisponibilidad Reportada', $niu);
                    }
                    return $msg;
                }
            } else {
                if (!$isTest) {
                    $this->setLogResultado('Ningun registro asociado', $solicitante);
                }
                return "$nombreSalida No he podido encontrar ningun registro asociado con esta cuenta.";
            }
        } catch (Exception $e) {
            //var_dump($e->getMessage());
            $this->setLogSGOerror($e->getMessage());
            $this->sendAlertSGOerror($e->getMessage());
            return "$nombreSalida en este momento no me registra ninguna suspensión ni me reporta ninguna falla del servicio en tu sector,👩‍💻 si deseas reportar un daño por favor selecciona la opcion de Reportar Falla. ";
            //return "$nombreSalida Ocurrio un error al momento de la consulta, intentalo de nuevo \n";
        }
    }

    //-------FUNCI0NES PARA LA CONEXION CON SIEC-----------
    //VALIDACIONES PARA EL IDENTIFICAR NIU

    public function getConsumosSIEC($niu, $isTest)
    {
        if ($this->ConsultaNumeroCuenta($niu, $isTest)) {
            $respuesta = $this->getConsumos($niu);
            $json['fulfillmentText'] = "Estos son los conceptos que tiene tu factura: ";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'text' => array(
                        'text' => [
                            $json['fulfillmentText'] . " " . $respuesta,
                        ],
                    ),
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        } else {
            $json['fulfillmentText'] = "El número de cuenta no esta registrado";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'],
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔁 Intentar nuevamente',
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        }
    }

    public function getFinanciacionesSIEC($niu, $isTest)
    {
        if ($this->ConsultaNumeroCuenta($niu, $isTest)) {
            $respuesta = $this->getFinanciaciones($niu);
            $json['fulfillmentText'] = "Estas son sus Financiaciones activas a la fecha: ";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'] . " " . $respuesta,
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        } else {
            $json['fulfillmentText'] = "El número de cuenta no esta registrado";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'],
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔁 Intentar nuevamente',
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        }
    }

    public function getProductosActivosSIEC($niu, $isTest)
    {
        if ($this->ConsultaNumeroCuenta($niu, $isTest)) {
            $respuesta = $this->getProductosActivos($niu);
            $json['fulfillmentText'] = "Estos son sus productos activos a la fecha: ";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'] . " " . $respuesta,
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        } else {
            $json['fulfillmentText'] = "El número de cuenta no esta registrado";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'],
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔁 Intentar nuevamente',
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        }
    }

    public function getPqrPqtSIEC($niu)
    {
    }

    public function getHistoricoProductosSIEC($niu, $isTest)
    {
        if ($this->ConsultaNumeroCuenta($niu, $isTest)) {
            $respuesta = $this->getHistoricoProductos($niu);
            $json['fulfillmentText'] = "Estos han sido los productos que ha adquirido: ";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'] . " " . $respuesta,
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        } else {
            $json['fulfillmentText'] = "El número de cuenta no esta registrado";

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'speech' => $json['fulfillmentText'],
                ),
                array(
                    'type' => 2,
                    'platform' => 'facebook',
                    'title' => 'Quieres consultar algo mas:',
                    'replies' => array(
                        '🔁 Intentar nuevamente',
                        '🔙 Consultar algo mas',
                        '👌 Finalizar la consulta',
                    ),
                ),
            );

            return $json;
        }
    }

    public function ConsultaNumeroCuenta($niu, $isTest)
    {
        $respuestaNiu = consultar_niu($this->con, $niu);
        if (count($respuestaNiu) == 1) {
            return true;
        } else {
            return false;
        }
    }

    public function get_Mail_Sms_Nodo($data)
    {
        $result = getUsersNodo($this->con, $data);
        return $result;
    }

    //Auxiliar de carga de indisponibilidad a nivel de circuito
    public function get_nodos_from_email($cadena)
    {
        $array = explode(" ", strtoupper($cadena));
        $response['FECHA'] = $array[0];
        $response['HORA'] = $array[1];
        $response['TIPO'] = $array[2];
        $response['NODO'] = $array[3];
        return $response;
    }
    //insertar log de difusion
    public function insertLog_Difusion($data)
    {
        $result = insert_Log_Difusion($this->con, $data);
        return $result;
    }

    //-----------------------------------------------------------------------------

    //----------------------------CARGA DE DATOS------------------------------------
    //Carga de indisponibilidad a nivel de circuito
    public function setIndispCircuito($data)
    {
        $result = insertIndispCircuito($this->con, $data);
        return $result;
    }

    //Auxiliar de carga de indisponibilidad a nivel de circuito
    public function getIndisponibilidadCircuitoData($cadena)
    {

        $array = explode(" ", strtoupper($cadena));
        $response['FECHA'] = $array[0];
        $response['HORA'] = $array[1];
        $response['ESTADO'] = $array[2];
        $response['CIRCUITO'] = $array[3];
        return $response;
    }

    //Carga de suspensiones efectivas
    public function setSuspensionEfectiva($data)
    {

        $result = insertSuspensionesEfectivas($this->con, $data);
        return $result;
    }

    //Carga de suspensiones programadas
    public function setSuspProgramada($data)
    {
        $result = insertSuspProgramada($this->con, $data);
        return $result;
    }

    //Actualizacion de suspensiones programadas
    public function updateSuspProgramada($data)
    {
        $result = updSuspProgramada($this->con, $data);
        return $result;
    }
    //----------------------------------------------------------------------

    //----------------------------CONEXION SGO------------------------------------

    public function consultarIndisponibilidad($niu)
    {

        $wsdl = $this->SGOurl;
        $client = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result = $client->ConsultarIndisponibilidad(array('Cuenta' => $niu));
        return $result->ConsultarIndisponibilidadResult;
    }

    public function consularInterrupcionesDelServicioXCuenta($niu)
    {

        $wsdl = $this->SGOurl;
        $client2 = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result2 = $client2->consularInterrupcionesDelServicioXCuenta(array('Cuenta' => $niu));

        return $result2->consularInterrupcionesDelServicioXCuentaResult;
    }

    public function consultarIndisponibilidadXNodo($nodo)
    {

        $wsdl = $this->SGOurl;
        $client3 = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result3 = $client3->consultarIndisponibilidadXNodo(array('Nodo' => $nodo));

        return $result3->consultarIndisponibilidadXNodoResult;
    }

    //---------------------------CONEXIoN SIEC--------------------------------------

    public function getConsumos($niu)
    {

        $wsdl = $this->SIECurl;
        $client = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result = $client->getConsumos(array('cuenta' => $niu));

        return $result->GetConsumosResult;
    }

    public function getFinanciaciones($niu)
    {

        $wsdl = $this->SIECurl;
        $client2 = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result2 = $client2->getFinanciaciones(array('cuenta' => $niu));

        return $result2->GetFinanciacionesResult;
    }

    public function getHistoricoProductos($niu)
    {

        $wsdl = $this->SIECurl;
        $client3 = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result3 = $client3->getHistoricoProductos(array('cuenta' => $niu));

        return $result3->GetHistoricoProductosResult;
    }

    public function getPqrPqt($niu)
    {

        $wsdl = $this->SIECurl;
        $client4 = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result4 = $client4->getPqrPqt(array('cuenta' => $niu));

        return $result4->getPqrPqtResult;
    }

    public function getProductosActivos($niu)
    {

        $wsdl = $this->SIECurl;
        $client5 = new \Mesmotronic\Soap\WsaSoapClient($wsdl);
        $result5 = $client5->getProductosActivos(array('cuenta' => $niu));

        return $result5->GetProductosActivosResult;
    }

    //----------------------------CALIFICACION DEL SERVICIO------------------------------------

    public function setCalificacion($calificacion, $niu_cuenta, $contexto)
    {
        $event = '';
        if (strtoupper($calificacion['calificacion']) == 'EXCELENTE' || strtoupper($calificacion['calificacion']) == 'BUENO' || strtoupper($calificacion['calificacion']) == 'NO DESEO CALIFICAR') {
            insertCalificacion($this->con, $calificacion, $niu_cuenta, true);
            $event = 'calif_positiva';
            $json['followupEventInput'] = array(
                'name' => $event,
                'languageCode' => 'es',
            );
            return $json;
        } else {
            $idCalNeg = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 8);
            $calificacion['idCalNeg'] = $idCalNeg;
            //insertCalificacion($this->con, $calificacion, $niu_cuenta, false);

            $json['fulfillmentMessages'] = array(
                array(
                    'type' => 0,
                    'platform' => 'facebook',
                    'text' => array(
                        'text' => [
                            '🙋‍♀ Tu opinión es muy importante para nosotros, 👉 por favor dime en qué podemos mejorar para así poder brindarte una mejor experiencia.',
                        ],
                    ),
                ),
                array(
                    "payload" => array(
                        "chatWebLucy" => array(
                            "text" => "🙋‍♀ Tu opinión es muy importante para nosotros, 👉 por favor dime en qué podemos mejorar para así poder brindarte una mejor experiencia."
                        ),
                    ),
                ),
            );
            $json['outputContexts'] = array(
                array(
                    "name" => $contexto,
                    "lifespanCount" => 1,
                    "parameters" => array(
                        "calNegativa" => $idCalNeg,
                    ),
                ),
            );
            return $json;
        }
    }

    public function setCalificacion2($idCalNeg, $senderid, $queryText)
    {

        $result = insertVOCCalificacion($this->con, $idCalNeg, $senderid, $queryText);
        $event = 'calif_negativa';
        $json['followupEventInput'] = array(
            'name' => $event,
            'languageCode' => 'es',
        );
        return $json;
    }

    /////////// DEVOLVER EVENTO DESDE UN FALLBACK PARA DIFERENTES INTENTS
    /*
    returnEventoInicio
    crearEvento
    crearContexto
    crearContexto2
    fallbackFacebook
    fallbackSkype
    fallbackTelegram
     */
    public function returnEventoInicio($reqBody)
    {

        /* $json['followupEventInput'] = $this->crearEvento('rd_calificacion_negativa');
        $outputContext = array();
        array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => '👩‍💻'), 1));
        array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😐 Regular'), 1));
        $json['outputContexts'] = $outputContext;
        $this->insertIdConversacion($reqBody);

        return $json; */
        //$this->insertIdConversacion($reqBody);
        if (isset($reqBody['originalDetectIntentRequest']['source'])) {

            if ($reqBody['originalDetectIntentRequest']['source'] == 'facebook') {
                $senderid = '';
                if (isset($reqBody['originalDetectIntentRequest']['source'])) {
                    if ($reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'] != "2868075403232590") {

                        insertSessionDialog($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id']);
                    }
                    $senderid = $reqBody['originalDetectIntentRequest']['payload']['data']['sender']['id'];
                } else {

                    $senderid = '2868075403232590';
                }
                $nameUser = $this->getNameFacebook($senderid);
                return $this->fallbackFacebook($reqBody, $nameUser);
            } else if ($reqBody['originalDetectIntentRequest']['source'] == 'skype') {
                insertSessionDialog($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['message']['address']['conversation']['id']);
                return $this->fallbackSkype($reqBody, '👩‍💻');
            } else if ($reqBody['originalDetectIntentRequest']['source'] == 'telegram') {
                if ($reqBody['originalDetectIntentRequest']['payload']['data']['message']['from']['id'] != 613620891) {

                    insertSessionDialog($this->con, $reqBody['originalDetectIntentRequest']['source'], $reqBody['originalDetectIntentRequest']['payload']['data']['message']['from']['id']);
                }
                $nameUser = $reqBody['originalDetectIntentRequest']['payload']['data']['message']['from']['first_name'];
                return $this->fallbackTelegram($reqBody, $nameUser);
            }
        } else {

            //$this->insertIdConversacion($reqBody);
            $event = 'evento_inicio_conversacion';
            $json['followupEventInput'] = array(
                'name' => $event,
                'languageCode' => 'es',
            );
            return $json;
        }
    }

    public function crearEvento($event)
    {
        return array(
            'name' => $event,
            'languageCode' => 'es',
        );
    }

    public function crearContexto($contextoNombre, $parameters, $lifeSpan)
    {
        return array(
            "name" => $contextoNombre,
            "lifespanCount" => $lifeSpan,
            "parameters" => $parameters,
        );
    }
    public function crearContexto2($contextoNombre, $lifeSpan)
    {
        return array(
            "name" => $contextoNombre,
            "lifespanCount" => $lifeSpan,
        );
    }

    public function fallbackTelegram($reqBody, $nameUser)
    {
        $json = array();
        if (isset($reqBody['originalDetectIntentRequest']['payload']['data']['message']['text'])) {
            $payload = $reqBody['originalDetectIntentRequest']['payload']['data']['message']['text'];
            $json = $this->returnJsonFalback3($payload, $nameUser);
            if (count($json) == 0) {
                $json = $this->returnJsonFalback2($payload, $nameUser);
            }
        } else {
            $json['followupEventInput'] = $this->crearEvento('evento_inicio_conversacion');
        }
        return $json;
    }

    public function fallbackSkype($reqBody, $nameUser)
    {
        $json = array();
        if (isset($reqBody['originalDetectIntentRequest']['payload']['data']['text'])) {
            $payload = $reqBody['originalDetectIntentRequest']['payload']['data']['text'];
            $json = $this->returnJsonFalback($payload, false, $nameUser);
            if (count($json) == 0) {
                $json = $this->returnJsonFalback2(strtoupper($payload), $nameUser);
            }
        } else {
            $json['followupEventInput'] = $this->crearEvento('evento_inicio_conversacion');
        }
        return $json;
    }

    public function fallbackFacebook($reqBody, $nameUser)
    {
        insertIdConversacion($this->con, $reqBody);
        $json = array();
        if (isset($reqBody['originalDetectIntentRequest']['payload']['data']['postback'])) {
            $payload = $reqBody['originalDetectIntentRequest']['payload']['data']['postback']['payload'];
            $json = $this->returnJsonFalback($payload, true, $nameUser);
        } else if (isset($reqBody['originalDetectIntentRequest']['payload']['data']['message'])) {
            $payload = strtolower($reqBody['originalDetectIntentRequest']['payload']['data']['message']['text']);
            $json = $this->returnJsonFalback2($payload, $nameUser);
        }

        return $json;
    }

    public function returnJsonFalback($payload, $flag, $nameUser)
    {
        $json = array();
        switch ($payload) {
            case 'Consultar Interrupción de Energía':
                $json['followupEventInput'] = $this->crearEvento('Falta_Energia');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Falta_Energía':
                $json['followupEventInput'] = $this->crearEvento('Falta_Energia');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Dirección Inmueble':
                $json['followupEventInput'] = $this->crearEvento('rd_direccion');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Nombre Titular Cuenta':
                $json['followupEventInput'] = $this->crearEvento('rd_nombre');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Teléfono o Celular':
                $json['followupEventInput'] = $this->crearEvento('rd_telefono');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Número de Cuenta':
                $json['followupEventInput'] = $this->crearEvento('rd_niu');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Cédula de Ciudadania':
                $json['followupEventInput'] = $this->crearEvento('rd_cc');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'NIT':
                $json['followupEventInput'] = $this->crearEvento('rd_nit');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Reportar Falla':
                $json['followupEventInput'] = $this->crearEvento('rd_repFalla');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '🔙 Regresar al Menú Principal':
                $json['followupEventInput'] = $this->crearEvento('rd_menuPpal');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '🔙 Buscar de nuevo':
                $json['followupEventInput'] = $this->crearEvento('rd_Falta_Energia2');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1_returnmenu', 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '👌 He finalizado la consulta':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '👌 Finalizar Consulta':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;

            case '😁 Bueno':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion_positiva');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😁 Bueno'), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '😐 Regular':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion_negativa');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😐 Regular'), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '😣 Malo':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion_negativa');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😣 Malo'), 1));
                $json['outputContexts'] = $outputContext;
                break;

            case 'Pago_Linea':
                $json['followupEventInput'] = $this->crearEvento('Pago_Linea');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Centros_Pago':
                $json['followupEventInput'] = $this->crearEvento('Centros_Pago');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'ver_vacantes':
                $json['followupEventInput'] = $this->crearEvento('ver_vacantes');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'otras_consultas':
                $json['followupEventInput'] = $this->crearEvento('otras_consultas');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Consultar Pago en Línea':
                $json['followupEventInput'] = $this->crearEvento('Pago_Linea');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Consultar Puntos de Atención':
                $json['followupEventInput'] = $this->crearEvento('Centros_Pago');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Ver Vacantes':
                $json['followupEventInput'] = $this->crearEvento('ver_vacantes');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Otros':
                $json['followupEventInput'] = $this->crearEvento('otras_consultas');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Otras Consultas':
                $json['followupEventInput'] = $this->crearEvento('otras_consultas');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            default:
                if ($flag) {

                    $json['followupEventInput'] = $this->crearEvento('Falta_Energia');
                    $outputContext = array();
                    array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                    $json['outputContexts'] = $outputContext;
                }

                break;
        }
        return $json;
    }

    public function returnJsonFalback2($payload, $nameUser)
    {
        $json = array();

        if (strpos($payload, 'falta de energía') !== false || strpos($payload, 'falta de energia') !== false || strpos($payload, 'energía') !== false || strpos($payload, 'energia') !== false || strpos($payload, 'reportar un daño') !== false || strpos($payload, 'suspensión') !== false || strpos($payload, 'interrupción') !== false || strpos($payload, 'interrupcion') !== false || is_numeric($payload) || strpos($payload, 'interrupciones') !== false) {
            $json['followupEventInput'] = $this->crearEvento('rd_repFalla');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        } else if (strpos($payload, 'pago en linea') !== false || strpos($payload, 'pago en línea') !== false || strpos($payload, 'pagar la factura') !== false || strpos($payload, 'pagara en línea') !== false || strpos($payload, 'pagara en linea') !== false) {
            $json['followupEventInput'] = $this->crearEvento('Pago_Linea');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        } else if (strpos($payload, 'puntos de atención') !== false || strpos($payload, 'horarios de atención') !== false || strpos($payload, 'puntos de pago') !== false) {
            $json['followupEventInput'] = $this->crearEvento('Centros_Pago');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        } else if (strpos($payload, 'vacantes') !== false || strpos($payload, 'convocatoria') !== false || strpos($payload, 'hoja de vida') !== false) {
            $json['followupEventInput'] = $this->crearEvento('ver_vacantes');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        } else if (strpos($payload, 'buenos días') !== false || strpos($payload, 'hola') !== false || strpos($payload, 'buenos dias') !== false || strpos($payload, 'buenas noches') !== false || strpos($payload, 'buenas tardes') !== false) {

            $json['followupEventInput'] = $this->crearEvento('evento_inicio_conversacion');
        } else if (strpos($payload, 'Otras Consultas') !== false || strpos($payload, 'chatear con alguien') !== false || strpos($payload, 'Quiero chatear') !== false) {

            $json['followupEventInput'] = $this->crearEvento('otras_consultas');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        } else if (strpos($payload, 'petición') !== false || strpos($payload, 'pqr') !== false || strpos($payload, 'peticion') !== false || strpos($payload, 'quejas') !== false || strpos($payload, 'queja') !== false || strpos($payload, 'reclamo') !== false || strpos($payload, 'reclamos') !== false || strpos($payload, 'recurso') !== false || strpos($payload, 'recursos') !== false) {

            $json['followupEventInput'] = $this->crearEvento('peticiones_quejas_reclamos');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        } else {
            $json['followupEventInput'] = $this->crearEvento('rd_menuPpal');
            $outputContext = array();
            array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
            $json['outputContexts'] = $outputContext;
        }
        return $json;
    }

    public function returnJsonFalback3($payload, $nameUser)
    {
        $json = array();
        switch ($payload) {
            case '1.⚡ Falta de Energía.':
                $json['followupEventInput'] = $this->crearEvento('Falta_Energia');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Dirección Inmueble':
                $json['followupEventInput'] = $this->crearEvento('rd_direccion');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Nombre Titular Cuenta':
                $json['followupEventInput'] = $this->crearEvento('rd_nombre');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Teléfono o Celular':
                $json['followupEventInput'] = $this->crearEvento('rd_telefono');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Número de Cuenta':
                $json['followupEventInput'] = $this->crearEvento('rd_niu');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Cédula de Ciudadania':
                $json['followupEventInput'] = $this->crearEvento('rd_cc');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'NIT':
                $json['followupEventInput'] = $this->crearEvento('rd_nit');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1', 1));
                $json['outputContexts'] = $outputContext;
                break;
            case 'Reportar Falla':
                $json['followupEventInput'] = $this->crearEvento('rd_repFalla');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '👉 Reportar Falla':
                $json['followupEventInput'] = $this->crearEvento('rd_repFalla');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '🔙 Regresar al Menú Principal':
                $json['followupEventInput'] = $this->crearEvento('rd_menuPpal');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '🔙 Buscar de nuevo':
                $json['followupEventInput'] = $this->crearEvento('rd_Falta_Energia2');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto2('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/c1_returnmenu', 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '👌 He finalizado la consulta':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '👌 Finalizar Consulta':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;

            case '😁 Bueno':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion_positiva');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😁 Bueno'), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '😐 Regular':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion_negativa');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😐 Regular'), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '😣 Malo':
                $json['followupEventInput'] = $this->crearEvento('rd_calificacion_negativa');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/calificacion', array("calificacion2" => '😣 Malo'), 1));
                $json['outputContexts'] = $outputContext;
                break;

            case '2. 💳 Pago en Línea.':
                $json['followupEventInput'] = $this->crearEvento('Pago_Linea');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '3. 🏢 Puntos de Atención.':
                $json['followupEventInput'] = $this->crearEvento('Centros_Pago');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '4. 💻 Vacantes.':
                $json['followupEventInput'] = $this->crearEvento('ver_vacantes');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            case '5. 🤔 Otros':
                $json['followupEventInput'] = $this->crearEvento('otras_consultas');
                $outputContext = array();
                array_push($outputContext, $this->crearContexto('projects/chatbotchec-usuarios/agent/sessions/4ea96692-c49b-48a9-dc99-21f258dc05ce/contexts/nombre', array("nombre" => $nameUser), 1));
                $json['outputContexts'] = $outputContext;
                break;
            default:
                break;
        }
        return $json;
    }

    //----------------------------INSERTS DE LOG PARA MONITOREO------------------------------------

    //Metodo para la insercion de una búsqueda en el log de busquedas.
    public function setLogBusqueda($contexto, $criterio)
    {
        return insertLogBusqueda($this->con, $contexto, $criterio);
    }

    //Metodo para la insercion de cada entrada en un menú diferente.
    public function setLogMenu($criterio)
    {
        return insertLogMenu($this->con, $criterio);
    }

    public function setLogResultado($tipo_indisponibilidad, $solicitante)
    {
        return insertLogResultado($this->con, $tipo_indisponibilidad, $solicitante);
    }

    public function setLogResultadoconNiu($tipo_indisponibilidad, $niu)
    {
        return insertLogResultadoconNiu($this->con, $tipo_indisponibilidad, $niu);
    }

    public function setLogSGOerror($msg)
    {
        if (strlen($msg) > 80) {
            $msg = substr($msg, 0, 80);
        }
        return insertLogSGOerror($this->con, $msg);
    }

    //ENVIO DE ALERTAS CUANDO SE CAE LA VPN PARA EL SGO
    public function sendAlertSGOerror($message)
    {

        include './sendEmail.php';
        $apiMail = new sendEmailAPI();
        $responseEmail = $apiMail->errorSGO($message);
        if ($responseEmail == "Ok") {
            return "Message successfully sent!";
        } else {
            return $responseEmail;
        }
    }

    //--------------------TRATAMIENTO DE DATOS, PARA EL WEB SERVICE DE SOLICITUD DE DATOS POR CONSULTA----------------------

    //busqueda de NIU por direccion
    public function searchAddress($direccion, $municipio)
    {

        $busqueda = $this->getNiuFromAddressConsulta($direccion, $municipio);

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "👩‍💼 Encontramos las siguientes cuentas asociadas a la direccion (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            $json = array();
            $json['criterio'] = 'direccion';
            $json['municipio_busqueda'] = $municipio;
            $json['dato_busqueda'] = $direccion;
            $cuentas_encontradas = array();
            foreach ($busqueda['VARIOS'] as $key => $value) {
                $cuenta = array();

                $cuenta['nombre'] = $value['NOMBRE'];
                $cuenta['documento'] = $value['DOCUMENTO'];
                $cuenta['niu'] = $value['NIU'];
                $cuenta['direccion'] = $value['DIRECCION'];
                $cuenta['telefono'] = $value['TELEFONO'];
                array_push($cuentas_encontradas, $cuenta);
            }
            $json['cuentas_encontradas'] = $cuentas_encontradas;
            return $json;
        } elseif (isset($busqueda['NINGUNO'])) {
            $json['criterio'] = 'direccion';
            $json['municipio_busqueda'] = $municipio;
            $json['dato_busqueda'] = $direccion;
            $json['cuentas_encontradas'] = array();
            return $json;
        }
    }

    //busqueda de NIU por nombre
    public function searchName($nombre, $municipio)
    {
        //$this->sendAlertSGOerror('Prueba para envio de correo electronico');
        $palabras = explode(" ", strtoupper($nombre));
        $busqueda = $this->getNiuFromNameConsulta($palabras, $municipio);

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "Encontramos las siguientes cuentas asociadas a la direccion (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            $json = array();
            $json['criterio'] = 'nombre';
            $json['municipio_busqueda'] = $municipio;
            $json['dato_busqueda'] = $nombre;
            $cuentas_encontradas = array();
            foreach ($busqueda['VARIOS'] as $key => $value) {
                $cuenta = array();

                $cuenta['nombre'] = $value['NOMBRE'];
                $cuenta['documento'] = $value['DOCUMENTO'];
                $cuenta['niu'] = $value['NIU'];
                $cuenta['direccion'] = $value['DIRECCION'];
                $cuenta['telefono'] = $value['TELEFONO'];
                array_push($cuentas_encontradas, $cuenta);
            }
            $json['cuentas_encontradas'] = $cuentas_encontradas;
            return $json;
        } elseif (isset($busqueda['NINGUNO'])) {
            $json['criterio'] = 'nombre';
            $json['municipio_busqueda'] = $municipio;
            $json['dato_busqueda'] = $nombre;
            $json['cuentas_encontradas'] = array();
            return $json;
        }
    }
    //busqueda de NIU por cedula
    public function searchCedula($cedula)
    {

        $busqueda = $this->getNiuFromCedulaConsulta($cedula);
        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "Encontramos las siguientes cuentas asociadas a la direccion (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            $json = array();
            $json['criterio'] = 'cedula';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $cedula;
            $cuentas_encontradas = array();
            foreach ($busqueda['VARIOS'] as $key => $value) {
                $cuenta = array();
                $cuenta['nombre'] = $value['NOMBRE'];
                $cuenta['documento'] = $value['DOCUMENTO'];
                $cuenta['niu'] = $value['NIU'];
                $cuenta['direccion'] = $value['DIRECCION'];
                $cuenta['telefono'] = $value['TELEFONO'];
                array_push($cuentas_encontradas, $cuenta);
            }
            $json['cuentas_encontradas'] = $cuentas_encontradas;
            return $json;
        } elseif (isset($busqueda['NINGUNO'])) {
            $json['criterio'] = 'cedula';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $cedula;
            $json['cuentas_encontradas'] = array();
            return $json;
        } else {
            return $busqueda;
        }
    }
    //busqueda de NIU por NIT
    public function searchNit($nit)
    {
        $busqueda = $this->getNiuFromNITConsulta($nit);
        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "Encontramos las siguientes cuentas asociadas a la direccion (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            $json = array();
            $json['criterio'] = 'nit';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $nit;
            $cuentas_encontradas = array();
            foreach ($busqueda['VARIOS'] as $key => $value) {
                $cuenta = array();
                $cuenta['nombre'] = $value['NOMBRE'];
                $cuenta['documento'] = $value['DOCUMENTO'];
                $cuenta['niu'] = $value['NIU'];
                $cuenta['direccion'] = $value['DIRECCION'];
                $cuenta['telefono'] = $value['TELEFONO'];
                array_push($cuentas_encontradas, $cuenta);
            }
            $json['cuentas_encontradas'] = $cuentas_encontradas;
            return $json;
        } elseif (isset($busqueda['NINGUNO'])) {
            $json['criterio'] = 'nit';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $nit;
            $json['cuentas_encontradas'] = array();
            return $json;
        } else {
            return $busqueda;
        }
    }
    //busqueda de cuenta por NIU
    public function searchNiu($niu)
    {
        $busqueda = $this->getNiuFromNIUConsulta($niu);

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "Encontramos las siguientes cuentas asociadas a la direccion (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";

            $json = array();
            $json['criterio'] = 'niu';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $niu;
            $cuentas_encontradas = array();
            foreach ($busqueda['VARIOS'] as $key => $value) {
                $cuenta = array();
                $cuenta['nombre'] = $value['NOMBRE'];
                $cuenta['documento'] = $value['DOCUMENTO'];
                $cuenta['niu'] = $value['NIU'];
                $cuenta['direccion'] = $value['DIRECCION'];
                $cuenta['telefono'] = $value['TELEFONO'];
                array_push($cuentas_encontradas, $cuenta);
            }
            $json['cuentas_encontradas'] = $cuentas_encontradas;
            return $json;
        } elseif (isset($busqueda['NINGUNO'])) {
            $json['criterio'] = 'niu';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $niu;
            $json['cuentas_encontradas'] = array();
            return $json;
        } else {
            return $busqueda;
        }
    }
    //busqueda de NIU por telefono
    public function searchPhone($telefono)
    {
        $busqueda = $this->getNiuFromPhoneConsulta($telefono);

        //Verificar si se obtuvo mas de una direccion
        if (isset($busqueda['VARIOS'])) {

            //$json['fulfillmentText'] = "Encontramos las siguientes cuentas asociadas a la direccion (Por cuestiones de seguridad no mostramos los datos en su totalidad): \n ";
            $json = array();
            $json['criterio'] = 'telefono';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $telefono;
            $cuentas_encontradas = array();
            foreach ($busqueda['VARIOS'] as $key => $value) {
                $cuenta = array();
                $cuenta['nombre'] = $value['NOMBRE'];
                $cuenta['documento'] = $value['DOCUMENTO'];
                $cuenta['niu'] = $value['NIU'];
                $cuenta['direccion'] = $value['DIRECCION'];
                $cuenta['telefono'] = $value['TELEFONO'];
                array_push($cuentas_encontradas, $cuenta);
            }
            $json['cuentas_encontradas'] = $cuentas_encontradas;
            return $json;
        } elseif (isset($busqueda['NINGUNO'])) {
            $json['criterio'] = 'telefono';
            $json['municipio_busqueda'] = '';
            $json['dato_busqueda'] = $telefono;
            $json['cuentas_encontradas'] = array();
            return $json;
        } else {
            return $busqueda;
        }
    }

    /*
    FUNCIONES PARA EL PROCESAMIENTO DE LA INFORMACIoN QUE LLEGA DEL WEB SERVICE, Y LAS CONSULTAS A LA BASE DE DATOS
    PARA EXTRAER LA INFORMACIoN DE LAS CUENTAS DE LOS USUARIOS
     */

    public function getNiuFromAddressConsulta($direccion, $municipio)
    {
        $direccionesProcesadas = $this->processAddress($direccion);
        $personas = getNIUwithAddressConsulta($this->con, $direccionesProcesadas, $municipio);
        $resultado = array();
        //Si encuentra algun registro
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {

                //Sin enmascarar
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION, 'NOMBRE' => $value->NOMBRE, 'DOCUMENTO' => $value->DOCUMENTO, 'TELEFONO' => $value->TELEFONO));
            }
            $resultado['VARIOS'] = $foundResults;
        } else {
            $resultado['NINGUNO'] = 1;
        }
        return $resultado;
    }

    public function getNiuFromNameConsulta($nombre, $municipio)
    {
        $personas = getNIUwithNameConsulta($this->con, $nombre, $municipio);
        $resultado = array();
        //Si encuentra un solo registro
        if (count($personas) > 0) {
            $foundResults = array();
            foreach ($personas as $key => $value) {
                array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION, 'NOMBRE' => $value->NOMBRE, 'DOCUMENTO' => $value->DOCUMENTO, 'TELEFONO' => $value->TELEFONO));
            }
            $resultado['VARIOS'] = $foundResults;
        } else {
            $resultado['NINGUNO'] = 1;
        }
        return $resultado;
    }

    public function getNiuFromCedulaConsulta($cedula)
    {
        $cedulaProccess = $this->processNumber($cedula);
        if ($cedulaProccess) {
            $personas = getNIUwithCedulaConsulta($this->con, $cedula);
            $resultado = array();
            //Si encuentra un solo registro
            if (count($personas) > 0) {
                $foundResults = array();
                foreach ($personas as $key => $value) {

                    array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION, 'NOMBRE' => $value->NOMBRE, 'DOCUMENTO' => $value->DOCUMENTO, 'TELEFONO' => $value->TELEFONO));
                }
                $resultado['VARIOS'] = $foundResults;
            } else {
                $resultado['NINGUNO'] = 1;
            }
            return $resultado;
        } else {
            return "El documento de busqueda contiene caracteres";
        }
    }

    public function getNiuFromNITConsulta($nit)
    {
        $nitProccess = $this->processNumber($nit);
        if ($nitProccess) {
            $personas = getNIUwithNITConsulta($this->con, $nit);
            $resultado = array();
            //Si encuentra un solo registro
            if (count($personas) > 0) {
                $foundResults = array();
                foreach ($personas as $key => $value) {
                    array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION, 'NOMBRE' => $value->NOMBRE, 'DOCUMENTO' => $value->DOCUMENTO, 'TELEFONO' => $value->TELEFONO));
                }
                $resultado['VARIOS'] = $foundResults;
            } else {
                $resultado['NINGUNO'] = 1;
            }
            return $resultado;
        } else {
            return "El NIT de busqueda contiene caracteres";
        }
    }

    public function getNiuFromNIUConsulta($niu)
    {
        $niuProccess = $this->processNumber($niu);
        if ($niuProccess) {
            $personas = getNIUwithNIUConsulta($this->con, $niu);
            $resultado = array();
            //Si encuentra un solo registro
            if (count($personas) > 0) {
                $foundResults = array();
                foreach ($personas as $key => $value) {
                    array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION, 'NOMBRE' => $value->NOMBRE, 'DOCUMENTO' => $value->DOCUMENTO, 'TELEFONO' => $value->TELEFONO));
                }
                $resultado['VARIOS'] = $foundResults;
            } else {
                $resultado['NINGUNO'] = 1;
            }
            return $resultado;
        } else {
            return "El NIU de busqueda contiene caracteres";
        }
    }

    public function getNiuFromPhoneConsulta($telefono)
    {
        $phonesProccess = $this->processNumber($telefono);
        if ($phonesProccess) {
            $personas = getNIUwithPhoneConsulta($this->con, $telefono);
            $resultado = array();
            //Si encuentra algun registro
            if (count($personas) > 0) {
                $foundResults = array();
                foreach ($personas as $key => $value) {

                    //Sin enmascarar
                    array_push($foundResults, array('NIU' => $value->NIU, 'DIRECCION' => $value->DIRECCION, 'NOMBRE' => $value->NOMBRE, 'DOCUMENTO' => $value->DOCUMENTO, 'TELEFONO' => $value->TELEFONO));
                }
                $resultado['VARIOS'] = $foundResults;
            } else {
                $resultado['NINGUNO'] = 1;
            }
            return $resultado;
        } else {

            return "El telefono de busqueda contiene caracteres";
        }
    }

    public function processNumber($numero)
    {
        if (is_numeric($numero)) {
            return true;
        } else {
            return false;
        }
    }

    public function guardarExcel($datos)
    {
        $result = guardar_Excel($this->con, $datos);
        return $result;
    }

    public function guardarExcelPrueba()
    {
        $result = consultaPruebaEstadistica($this->con);
        return $result;
    }

    //WEB SERVICE INDISPONIBILIDADES BPMCO

    //CONSULTAR
    public function consultargetSQSQuery($sql)
    {
        return getSQSQuery($this->con_sqlServer, $sql);
    }

    public function consultargetSSCountHistoricoIndis($niu, $aniomes, $anio)
    {
        return getSSCountHistoricoIndis($this->con_sqlServer, $niu, $aniomes, $anio);
    }

    //busqueda de NIU
    public function wsIndisponibilidadesBpmco($niu, $isTest)
    {
        $respuestaNiu = consultar_niu($this->con, $niu);
        $busqueda = array();
        if (count($respuestaNiu) > 0) {
            $busqueda = array();
            $llamado = $this->getIndisponibilidad($niu, true, 'BPMCO', '');
            if (is_array($llamado)) {
                array_push($busqueda, $llamado);
            } else {
                $busqueda = array();
            }
            return $busqueda;
        }
        return $busqueda;
    }

    //WEB SERVICE Comportamientos deseables bpmco

    //busqueda de NIU 103467777

    public function wsComportamientosBpmco($niu, $isTest)
    {
        $comDeseable = getComDeseables($this->con, $niu);
        $suspensiones = array();
        $cartera = array();
        $momentoPago = array();
        $quejas = array();
        $reclamosrecibidos = array();
        $fraudes = array();
        $SAIFI = array();
        $SAIDI = array();
        $consumoSubsidiado = array();
        $canalesVanguar = array();

        $respuesta = array();
        if (count($comDeseable) > 0) {

            foreach ($comDeseable as $key => $value) {

                $semaforo = "";
                //comportamiento CARTERA
                $sumatoriaCartera1 = 0;
                $sumatoriaCartera2 = 0;
                $sumatoriaCartera3 = 0;
                $sumatoriaCartera4 = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->VR_CARTERA60_90_120)) {
                    $sumatoriaCartera1 = $value->VR_CARTERA60_90_120;
                }
                if (is_numeric($value->VR_CARTERA150_180_210)) {
                    $sumatoriaCartera2 = $value->VR_CARTERA150_180_210;
                }
                if (is_numeric($value->VR_CARTERA240_270_300)) {
                    $sumatoriaCartera3 = $value->VR_CARTERA240_270_300;
                }
                if (is_numeric($value->VR_CARTERA330_360_MAYOR360)) {
                    $sumatoriaCartera4 = $value->VR_CARTERA330_360_MAYOR360;
                }
                if ($sumatoriaCartera1 == 0 && $sumatoriaCartera2 == 0 && $sumatoriaCartera3 == 0 && $sumatoriaCartera4 == 0) {
                    $semaforo = "verde";
                } else {
                    $semaforo = "rojo";
                }
                $json = array(
                    "comportamiento_asociado" => "Cultura de pago",
                    "nombre_indicador" => "Cartera en mora mayor a 60 dias",
                    "valor_indicador" => $sumatoriaCartera1 + $sumatoriaCartera2 + $sumatoriaCartera3 + $sumatoriaCartera4,
                    "semaforo" => $semaforo,
                );

                array_push($cartera, $json);

                //comportamiento Momento de pago en los ultimos 12 meses antes+durante/emitidas
                $total = 0;
                $sumatoriaMomento1 = 0;
                $sumatoriaMomento2 = 0;

                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_FACTURASEMITIDAS) && $value->NUM_FACTURASEMITIDAS != 0) {
                    if (is_numeric($value->NUM_FACTPAGADASANTES)) {
                        $sumatoriaMomento1 = $value->NUM_FACTPAGADASANTES;
                    }
                    if (is_numeric($value->NUM_FACTPAGADASANTES)) {
                        $sumatoriaMomento2 = $value->NUM_FACTPAGADASDURANTE;
                    }
                    $total = ((($sumatoriaMomento1 + $sumatoriaMomento2) / $value->NUM_FACTURASEMITIDAS) * 100);
                    if ($total >= 90) {
                        $semaforo = "verde";
                    } else if ($total >= 60 && $total <= 89) {
                        $semaforo = "amarillo";
                    } else if ($total <= 59) {
                        $semaforo = "rojo";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Cultura de pago",
                    "nombre_indicador" => "Momento de Pago",
                    "valor_indicador" => $total,
                    "semaforo" => $semaforo,
                );

                array_push($momentoPago, $json);

                //comportamiento numero de quejas
                $sumatoriaQuejas = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_QUEJAS)) {

                    $sumatoriaQuejas = $value->NUM_QUEJAS;
                    if ($value->NUM_QUEJAS == 0) {
                        $semaforo = "verde";
                    } else if ($value->NUM_QUEJAS >= 1) {
                        $semaforo = "rojo";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Disfrute del servicio y uso responsable del servicio de energia",
                    "nombre_indicador" => "Quejas CHEC",
                    "valor_indicador" => $sumatoriaQuejas,
                    "semaforo" => $semaforo,
                );

                array_push($quejas, $json);

                //comportamiento RECLAMOS RECIBIDOS
                $sumatoriaReclamos = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_RECLAMOSRECIBIDOS)) {

                    $sumatoriaReclamos = $value->NUM_RECLAMOSRECIBIDOS;
                    if ($value->NUM_RECLAMOSRECIBIDOS == 0) {
                        $semaforo = "verde";
                    } else if ($value->NUM_RECLAMOSRECIBIDOS >= 1) {
                        $semaforo = "rojo";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Disfrute del servicio y uso responsable del servicio de energia",
                    "nombre_indicador" => "Reclamos CHEC",
                    "valor_indicador" => $sumatoriaReclamos,
                    "semaforo" => $semaforo,
                );

                array_push($reclamosrecibidos, $json);

                //comportamiento Cantidad de veces que se ha visto afectada en una indisponibilidad saifi
                $sumatoriaIndispo = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_VECESINDISPONIBILIDAD)) {

                    $sumatoriaIndispo = $value->NUM_VECESINDISPONIBILIDAD;
                    if ($value->NUM_VECESINDISPONIBILIDAD == 0) {
                        $semaforo = "verde";
                    } else if ($value->NUM_VECESINDISPONIBILIDAD >= 1) {
                        $semaforo = "rojo";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Disfrute del servicio y uso responsable del servicio de energia",
                    "nombre_indicador" => "numero indisponibilidades (SAIFI)",
                    "valor_indicador" => $sumatoriaIndispo,
                    "semaforo" => $semaforo,
                );

                array_push($SAIFI, $json);

                //comportamiento Cantidad de horas que se ha visto afectada en una indisponibilidad saidi
                $sumatoriaIndispo = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_HORASINDISPONIBILIDAD)) {

                    $sumatoriaIndispo = $value->NUM_HORASINDISPONIBILIDAD;
                    if ($value->NUM_HORASINDISPONIBILIDAD > 5) {
                        $semaforo = "rojo";
                    } else if ($value->NUM_HORASINDISPONIBILIDAD <= 5) {
                        $semaforo = "verde";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Disfrute del servicio y uso responsable del servicio de energia",
                    "nombre_indicador" => "Horas indisponibilidades (SAIDI)",
                    "valor_indicador" => $sumatoriaIndispo,
                    "semaforo" => $semaforo,
                );

                array_push($SAIDI, $json);

                //comportamiento SUSPENSIONES
                $sumatoriaSuspe = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_SUSPENSIONES)) {
                    $sumatoriaSuspe = $value->NUM_SUSPENSIONES;
                    if ($value->NUM_SUSPENSIONES == 0) {
                        $semaforo = "verde";
                    } else if ($value->NUM_SUSPENSIONES >= 1 && $value->NUM_SUSPENSIONES <= 2) {
                        $semaforo = "amarillo";
                    } else if ($value->NUM_SUSPENSIONES >= 3) {
                        $semaforo = "rojo";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Cultura de pago",
                    "nombre_indicador" => "Numero de suspensiones en 1 año",
                    "valor_indicador" => $sumatoriaSuspe,
                    "semaforo" => $semaforo,
                );

                array_push($suspensiones, $json);

                //comportamiento fraudes
                $sumatoriaFraudes = 0;
                //se verifica que la informacion sena numero patra hacer los respectivos operaciones
                if (is_numeric($value->NUM_FRAUDES)) {
                    $sumatoriaFraudes = $value->NUM_FRAUDES;
                    if ($value->NUM_FRAUDES == 0) {
                        $semaforo = "verde";
                    } else if ($value->NUM_FRAUDES >= 1) {
                        $semaforo = "rojo";
                    }
                } else {
                    $semaforo = "verde";
                }
                $json = array(
                    "comportamiento_asociado" => "Cultura de pago",
                    "nombre_indicador" => "fraudes",
                    "valor_indicador" => $sumatoriaFraudes,
                    "semaforo" => $semaforo,
                );

                array_push($fraudes, $json);

                //comportamiento consumo subsidiado
                $consumo = 0;
                /* if (is_numeric($value->VR_TOTALFACTURADO) && $value->VR_TOTALFACTURADO != 0) {

                $pagadoFacturado = (($value->VR_PAGADO / $value->VR_TOTALFACTURADO) * 100);
                if ($pagadoFacturado >= 90) {
                $semaforo = "verde";
                } else if ($pagadoFacturado >= 60 && $pagadoFacturado <= 89) {
                $semaforo = "amarillo";
                } else if ($pagadoFacturado <= 59) {
                $semaforo = "rojo";
                }
                } else {
                $semaforo = "verde";
                } */
                $json = array(
                    "comportamiento_asociado" => "Disfrute del servicio y uso responsable del servicio de energia",
                    "nombre_indicador" => "Consumo Subsidiado",
                    "valor_indicador" => $consumo,
                    "semaforo" => 'Gris',
                );

                array_push($consumoSubsidiado, $json);

                //comportamiento canales vanguardistas
                $canales = 0;
                /* if (is_numeric($value->VR_TOTALFACTURADO) && $value->VR_TOTALFACTURADO != 0) {

                $pagadoFacturado = (($value->VR_PAGADO / $value->VR_TOTALFACTURADO) * 100);
                if ($pagadoFacturado >= 90) {
                $semaforo = "verde";
                } else if ($pagadoFacturado >= 60 && $pagadoFacturado <= 89) {
                $semaforo = "amarillo";
                } else if ($pagadoFacturado <= 59) {
                $semaforo = "rojo";
                }
                } else {
                $semaforo = "verde";
                } */
                $json = array(
                    "comportamiento_asociado" => "Uso de Canales Vanguardistas",
                    "nombre_indicador" => "Canales Vanguardistas",
                    "valor_indicador" => $canales,
                    "semaforo" => 'Gris',
                );

                array_push($canalesVanguar, $json);
            }
        }
        $respuesta['quejas'] = $quejas;
        $respuesta['reclamosrecibidos'] = $reclamosrecibidos;
        $respuesta['suspensiones'] = $suspensiones;
        $respuesta['fraudes'] = $fraudes;
        $respuesta['saifi'] = $SAIFI;
        $respuesta['saidi'] = $SAIDI;
        $respuesta['cartera'] = $cartera;
        $respuesta['momentopago'] = $momentoPago;
        $respuesta['consumosubsidiado'] = $consumoSubsidiado;
        $respuesta['canalesvanguardistas'] = $canalesVanguar;
        //$respuesta['pagadofacturado'] = $pagadofacturado;

        return $respuesta;
    }

    //WEB SERVICE CONTACT CENTER BPMCO
    //---------------------------------------------

    public function wsContacCenterBpmco($niu, $isTest)
    {
        $llamadas = getContactCenter($this->con, $niu);
        $response = array();
        $danos = array();
        $pqrs = array();
        $otros = array();
        $servicioCliente = array();
        $informacion = array();
        $perdidas = array();
        if (count($llamadas) > 0) {

            foreach ($llamadas as $key => $value) {
                $nivel2 = strtoupper($value->Nivel2);
                $fecha = new DateTime($value->Fecha);

                if (
                    $nivel2 == "ALUMBRADO PUBLICO" || $nivel2 == "DANOS DE ENERGIA" || $nivel2 == "DANOS_EMPRESAS"
                    || $nivel2 == "TRANSFERENCIA DESDE DANOS" || $nivel2 == "SUSPENSIONES PROGRAMADAS"
                ) {
                    array_push($danos, array(
                        'fecha_llamada' => $fecha->format('Y-m-d'),
                        'hora_llamada' => $value->Hora,
                        'telefono_emite' => $value->C_Telefono,
                        'Celular_emite' => $value->C_Celular,
                        'finalizazion_llamada' => $value->CodFinalizacion,
                    ));
                } else if ($nivel2 == "PETICIONES" || $nivel2 == "QUEJA" || $nivel2 == "RECLAMOS") {
                    array_push($pqrs, array(
                        'fecha_llamada' => $fecha->format('Y/m/d'),
                        'hora_llamada' => $value->Hora,
                        'telefono_emite' => $value->C_Telefono,
                        'Celular_emite' => $value->C_Celular,
                        'finalizazion_llamada' => $value->CodFinalizacion,
                    ));
                } else if ($nivel2 == "OTRAS LLAMADAS" || $nivel2 == "OTROS NEGOCIOS CHEC" || $nivel2 == "NO ASIGNADO" || $nivel2 == "") {
                    array_push($otros, array(
                        'fecha_llamada' => $fecha->format('Y/m/d'),
                        'hora_llamada' => $value->Hora,
                        'telefono_emite' => $value->C_Telefono,
                        'Celular_emite' => $value->C_Celular,
                        'finalizazion_llamada' => $value->CodFinalizacion,
                    ));
                } else if ($nivel2 == "SERVICIO AL CLIENTE") {
                    array_push($servicioCliente, array(
                        'fecha_llamada' => $fecha->format('Y/m/d'),
                        'hora_llamada' => $value->Hora,
                        'telefono_emite' => $value->C_Telefono,
                        'Celular_emite' => $value->C_Celular,
                        'finalizazion_llamada' => $value->CodFinalizacion,
                    ));
                } else if ($nivel2 == "INFORMACION" || $nivel2 == "SAC_EMPRESAS" || $nivel2 == "RSA") {
                    array_push($perdidas, array(
                        'fecha_llamada' => $fecha->format('Y/m/d'),
                        'hora_llamada' => $value->Hora,
                        'telefono_emite' => $value->C_Telefono,
                        'Celular_emite' => $value->C_Celular,
                        'finalizazion_llamada' => $value->CodFinalizacion,
                    ));
                } else if ($nivel2 == "PERDIDAS") {
                    array_push($informacion, array(
                        'fecha_llamada' => $fecha->format('Y/m/d'),
                        'hora_llamada' => $value->Hora,
                        'telefono_emite' => $value->C_Telefono,
                        'Celular_emite' => $value->C_Celular,
                        'finalizazion_llamada' => $value->CodFinalizacion,
                    ));
                }
            }
        }
        $response['cantidad_llamadas'] = count($llamadas);
        $response['danos'] = $danos;
        $response['pqrs'] = $pqrs;
        $response['informacion'] = $informacion;
        $response['servicio_cliente'] = $servicioCliente;
        $response['perdidas'] = $servicioCliente;
        $response['otros'] = $otros;

        return $response;
    }

    //WEB SERVICE TURNOS BPMCO
    //---------------------------------------------

    public function wsTurnosBpmco($niu, $isTest)
    {
        $turnos = getTurnos($this->con, $niu);
        $response = array();
        $acuerdosSolucionesPago = array();
        $atencionPreferencial = array();
        $facturacionReclamos = array();
        $otros = array();
        $recepcionDocumentos = array();
        $solicitudServicios = array();
        if (count($turnos) > 0) {

            foreach ($turnos as $key => $value) {
                $grupo = strtoupper($value->Grupo);
                $fechaAtencion = new DateTime($value->FechaAtencion);
                $horaImpresionTurno = new DateTime($value->FechaImpresion);
                $HoraAtencion = new DateTime($value->FechaAtencion);
                $tiempoEspera = $value->TiempoEsperaSegundo;
                $tiempoAtencion = $value->TiempoAtencionSegundo;

                if ($value->Grupo == "Acuerdos y Soluciones de Pago") {
                    array_push($acuerdosSolucionesPago, array(
                        'sede' => $value->Sede,
                        'turno' => $value->Turno,
                        'fecha_atencion' => $fechaAtencion->format('Y-m-d'),
                        'hora_impresion_turno' => $horaImpresionTurno->format('h:i:s'),
                        'tiempo_espera' => $tiempoEspera,
                        'hora_atencion' => $HoraAtencion->format('h:i:s'),
                        'tiempo_atencion' => $tiempoAtencion,
                    ));
                } else if ($value->Grupo == "Atencion Preferencial") {
                    array_push($atencionPreferencial, array(
                        'sede' => $value->Sede,
                        'turno' => $value->Turno,
                        'fecha_atencion' => $fechaAtencion->format('Y-m-d'),
                        'hora_impresion_turno' => $horaImpresionTurno->format('h:i:s'),
                        'tiempo_espera' => $tiempoEspera,
                        'hora_atencion' => $HoraAtencion->format('h:i:s'),
                        'tiempo_atencion' => $tiempoAtencion,
                    ));
                } else if ($value->Grupo == "Informacion de Facturacion y reclamos") {
                    array_push($facturacionReclamos, array(
                        'sede' => $value->Sede,
                        'turno' => $value->Turno,
                        'fecha_atencion' => $fechaAtencion->format('Y-m-d'),
                        'hora_impresion_turno' => $horaImpresionTurno->format('h:i:s'),
                        'tiempo_espera' => $tiempoEspera,
                        'hora_atencion' => $HoraAtencion->format('h:i:s'),
                        'tiempo_atencion' => $tiempoAtencion,
                    ));
                } else if ($value->Grupo == "Otras Solicitudes") {
                    array_push($otros, array(
                        'sede' => $value->Sede,
                        'turno' => $value->Turno,
                        'fecha_atencion' => $fechaAtencion->format('Y-m-d'),
                        'hora_impresion_turno' => $horaImpresionTurno->format('h:i:s'),
                        'tiempo_espera' => $tiempoEspera,
                        'hora_atencion' => $HoraAtencion->format('h:i:s'),
                        'tiempo_atencion' => $tiempoAtencion,
                    ));
                } else if ($value->Grupo == "Recepcion de Documentos copias reconexion y pagos") {
                    array_push($recepcionDocumentos, array(
                        'sede' => $value->Sede,
                        'turno' => $value->Turno,
                        'fecha_atencion' => $fechaAtencion->format('Y-m-d'),
                        'hora_impresion_turno' => $horaImpresionTurno->format('h:i:s'),
                        'tiempo_espera' => $tiempoEspera,
                        'hora_atencion' => $HoraAtencion->format('h:i:s'),
                        'tiempo_atencion' => $tiempoAtencion,
                    ));
                } else if ($value->Grupo == "Solicitud de Nuevos Servicios") {
                    array_push($solicitudServicios, array(
                        'sede' => $value->Sede,
                        'turno' => $value->Turno,
                        'fecha_atencion' => $fechaAtencion->format('Y-m-d'),
                        'hora_impresion_turno' => $horaImpresionTurno->format('h:i:s'),
                        'tiempo_espera' => $tiempoEspera,
                        'hora_atencion' => $HoraAtencion->format('h:i:s'),
                        'tiempo_atencion' => $tiempoAtencion,
                    ));
                }
            }
        }
        $response['cantidad_turnos_solicitados'] = count($turnos);
        $response['acuerdosSolucionesDePago'] = $acuerdosSolucionesPago;
        $response['atencionPreferencial'] = $atencionPreferencial;
        $response['facturacionReclamos'] = $facturacionReclamos;
        $response['otrasSolicitudes'] = $otros;
        $response['recepcionDocumentos'] = $recepcionDocumentos;
        $response['solicitudNuevosServicios'] = $solicitudServicios;

        return $response;
    }
}
